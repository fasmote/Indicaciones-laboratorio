@echo off
chcp 65001 >nul
setlocal enabledelayedexpansion

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üöÄ IMPORTACI√ìN COMPLETA                   ‚ïë
echo ‚ïë              Datos Reales del Excel al Sistema              ‚ïë
echo ‚ïë                                                              ‚ïë
echo ‚ïë          Sistema de Indicaciones de Laboratorio             ‚ïë
echo ‚ïë                    DGSISAN 2025                              ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

REM Configuraci√≥n de rutas
set "PROYECTO_DIR=C:\Users\clau\Documents\DGSISAN_2025bis\Indicaciones\indicaciones-app"
set "EXCEL_FILE=REVISARTabla de indicaciones para pacientes actualizada 2024 enviada por la RED.xlsx"

echo üìç Cambiando a directorio del proyecto...
cd /d "%PROYECTO_DIR%"
if errorlevel 1 (
    echo ‚ùå ERROR: No se pudo acceder al directorio del proyecto
    echo    Ruta: %PROYECTO_DIR%
    pause
    exit /b 1
)

echo ‚úÖ Directorio actual: %CD%
echo.

echo üîç Verificando prerequisitos...
echo ================================

REM Verificar Node.js
node --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå ERROR: Node.js no est√° instalado
    echo    Descargar desde: https://nodejs.org/
    pause
    exit /b 1
)
echo ‚úÖ Node.js: 
node --version

REM Verificar NPM
npm --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå ERROR: NPM no est√° disponible
    pause
    exit /b 1
)
echo ‚úÖ NPM: 
npm --version

REM Verificar archivo Excel
if not exist "%EXCEL_FILE%" (
    echo ‚ùå ERROR: Archivo Excel no encontrado
    echo    Archivo: %EXCEL_FILE%
    echo    Aseg√∫rate de que est√© en la carpeta del proyecto
    pause
    exit /b 1
)
echo ‚úÖ Archivo Excel encontrado

REM Verificar SQLite3
sqlite3 -version >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  WARNING: SQLite3 no encontrado en PATH
    echo    Se intentar√° usar el SQLite3 de Node.js
) else (
    echo ‚úÖ SQLite3: 
    sqlite3 -version
)

echo.
echo üì¶ Verificando e instalando dependencias...
echo ==========================================

REM Instalar dependencias principales si no existen
if not exist "node_modules" (
    echo üîÑ Instalando dependencias principales...
    npm install
    if errorlevel 1 (
        echo ‚ùå ERROR: Fall√≥ la instalaci√≥n de dependencias
        pause
        exit /b 1
    )
    echo ‚úÖ Dependencias principales instaladas
) else (
    echo ‚úÖ Dependencias principales ya est√°n instaladas
)

REM Verificar e instalar dependencias espec√≠ficas
echo üîÑ Verificando dependencias espec√≠ficas...

npm list xlsx >nul 2>&1
if errorlevel 1 (
    echo    Instalando xlsx...
    npm install xlsx
    if errorlevel 1 (
        echo ‚ùå ERROR: No se pudo instalar xlsx
        pause
        exit /b 1
    )
)
echo ‚úÖ xlsx disponible

npm list node-fetch >nul 2>&1
if errorlevel 1 (
    echo    Instalando node-fetch...
    npm install node-fetch
    if errorlevel 1 (
        echo ‚ùå ERROR: No se pudo instalar node-fetch
        pause
        exit /b 1
    )
)
echo ‚úÖ node-fetch disponible

echo.
echo üóÉÔ∏è  Preparando base de datos...
echo ==============================

REM Verificar que la base de datos existe
if not exist "prisma\indicaciones.db" (
    echo üîÑ Creando base de datos...
    npm run db:generate
    if errorlevel 1 (
        echo ‚ùå ERROR: Fall√≥ la generaci√≥n del cliente Prisma
        pause
        exit /b 1
    )
    
    npm run db:migrate
    if errorlevel 1 (
        echo ‚ùå ERROR: Fall√≥ la migraci√≥n de la base de datos
        pause
        exit /b 1
    )
    echo ‚úÖ Base de datos creada
) else (
    echo ‚úÖ Base de datos ya existe
    
    REM Hacer backup de la base de datos actual
    set "FECHA=%date:~-4,4%%date:~-10,2%%date:~-7,2%"
    set "HORA=%time:~0,2%%time:~3,2%%time:~6,2%"
    set "BACKUP_NAME=indicaciones_backup_%FECHA%_%HORA:.= %.db"
    
    echo üîÑ Creando backup de la base de datos actual...
    copy "prisma\indicaciones.db" "prisma\%BACKUP_NAME%" >nul
    if errorlevel 1 (
        echo ‚ö†Ô∏è  WARNING: No se pudo crear backup
    ) else (
        echo ‚úÖ Backup creado: %BACKUP_NAME%
    )
)

echo.
echo üìä Ejecutando importaci√≥n inteligente...
echo ========================================

REM Crear el script de importaci√≥n inteligente si no existe
if not exist "importacion-inteligente.js" (
    echo üìù Creando script de importaci√≥n...
    echo // Script ser√° creado por el usuario con el contenido del artefacto > importacion-inteligente.js
    echo ‚ö†Ô∏è  IMPORTANTE: Debes copiar el contenido del script de importaci√≥n inteligente
    echo    desde el artefacto generado a 'importacion-inteligente.js'
    pause
    echo Presiona cualquier tecla despu√©s de crear el archivo...
    pause
)

REM Ejecutar importaci√≥n
echo üöÄ Iniciando importaci√≥n de datos reales...
echo.
node importacion-inteligente.js
if errorlevel 1 (
    echo.
    echo ‚ùå ERROR: Fall√≥ la importaci√≥n de datos
    echo    Revisa los mensajes de error arriba
    pause
    exit /b 1
)

echo.
echo ‚úÖ Importaci√≥n de datos completada exitosamente!
echo.

REM Verificar que se gener√≥ el archivo SQL
if not exist "datos_reales_import.sql" (
    echo ‚ùå ERROR: No se gener√≥ el archivo SQL
    pause
    exit /b 1
)

echo üìÅ Archivo SQL generado: datos_reales_import.sql
echo.

echo üóÉÔ∏è  Aplicando datos a la base de datos...
echo =========================================

REM Aplicar datos usando sqlite3 o m√©todo alternativo
sqlite3 "prisma\indicaciones.db" < "datos_reales_import.sql" 2>nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  M√©todo SQLite3 directo fall√≥, intentando m√©todo alternativo...
    
    REM M√©todo alternativo usando Node.js
    echo const fs = require('fs'^); > aplicar_sql.js
    echo const { execSync } = require('child_process'^); >> aplicar_sql.js
    echo try { >> aplicar_sql.js
    echo   execSync('sqlite3 prisma/indicaciones.db ".read datos_reales_import.sql"'^); >> aplicar_sql.js
    echo   console.log('‚úÖ Datos aplicados exitosamente'^); >> aplicar_sql.js
    echo } catch(e^) { >> aplicar_sql.js
    echo   console.error('‚ùå Error:', e.message^); >> aplicar_sql.js
    echo   process.exit(1^); >> aplicar_sql.js
    echo } >> aplicar_sql.js
    
    node aplicar_sql.js
    if errorlevel 1 (
        echo ‚ùå ERROR: No se pudieron aplicar los datos a la base de datos
        echo    Intenta manualmente: sqlite3 prisma\indicaciones.db < datos_reales_import.sql
        pause
        exit /b 1
    )
    
    del aplicar_sql.js
) else (
    echo ‚úÖ Datos aplicados exitosamente a la base de datos
)

echo.
echo üîç Ejecutando verificaci√≥n post-importaci√≥n...
echo =============================================

REM Crear script de verificaci√≥n si no existe
if not exist "verificar-importacion.js" (
    echo üìù Script de verificaci√≥n ser√° creado...
    echo ‚ö†Ô∏è  Debes copiar el contenido del script de verificaci√≥n desde el artefacto
    pause
)

REM Ejecutar verificaci√≥n
node verificar-importacion.js
if errorlevel 1 (
    echo ‚ö†Ô∏è  Verificaci√≥n mostr√≥ algunos problemas
    echo    Revisa los mensajes arriba
) else (
    echo ‚úÖ Verificaci√≥n completada exitosamente
)

echo.
echo üéâ ¬°IMPORTACI√ìN COMPLETA FINALIZADA!
echo ====================================
echo.
echo üìä Resumen del proceso:
echo   ‚úÖ Dependencias verificadas e instaladas
echo   ‚úÖ Base de datos preparada
echo   ‚úÖ Datos del Excel procesados e importados
echo   ‚úÖ Base de datos actualizada con datos reales
echo   ‚úÖ Verificaci√≥n de integridad completada
echo.
echo üöÄ Pr√≥ximos pasos:
echo   1. Ejecutar el servidor: npm run dev
echo   2. Abrir navegador: http://localhost:3000
echo   3. Probar el simulador de indicaciones
echo   4. Verificar que las indicaciones se generan correctamente
echo.
echo üîß Comandos √∫tiles:
echo   ‚Ä¢ Ver datos:     npm run db:studio
echo   ‚Ä¢ Reiniciar DB:  npm run db:reset
echo   ‚Ä¢ Health check:  curl http://localhost:3000/api/health
echo.
echo ‚ú® ¬°El sistema ahora tiene los datos reales del laboratorio!
echo.

REM Preguntar si quiere iniciar el servidor inmediatamente
set /p "INICIAR_SERVIDOR=¬øDeseas iniciar el servidor ahora? (s/N): "
if /i "!INICIAR_SERVIDOR!"=="s" (
    echo.
    echo üöÄ Iniciando servidor de desarrollo...
    echo    Presiona Ctrl+C para detener el servidor
    echo    URL: http://localhost:3000
    echo.
    npm run dev
) else (
    echo.
    echo üëã Para iniciar el servidor m√°s tarde ejecuta: npm run dev
    echo.
)

echo üìã Log de importaci√≥n guardado en: importacion.log
echo %date% %time% - Importaci√≥n completada exitosamente >> importacion.log

pause