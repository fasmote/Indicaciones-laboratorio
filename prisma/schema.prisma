// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./indicaciones.db"
}

model Practica {
  id           Int      @id @default(autoincrement()) @map("id_practica")
  nombre       String
  codigo       String   @unique
  activo       Boolean  @default(true)
  fechaCreacion DateTime @default(now()) @map("fecha_creacion")
  
  // Relaciones
  grupos       PracticaGrupo[]
  
  @@map("PRACTICA")
}

model Grupo {
  id                       Int       @id @default(autoincrement()) @map("id_grupo")
  nombre                   String
  descripcion              String?
  ayunoHoras              Int?      @map("ayuno_horas")
  orinaHoras              Int?      @map("orina_horas")
  orinaTipo               String?   @map("orina_tipo")
  activo                  Boolean   @default(true)
  fechaAlta               DateTime  @default(now()) @map("fecha_alta")
  fechaBaja               DateTime? @map("fecha_baja")
  fechaUltimaModificacion DateTime  @default(now()) @updatedAt @map("fecha_ultima_modificacion")
  
  // Relaciones
  practicas              PracticaGrupo[]
  indicaciones           GrupoIndicacion[]
  gruposAlternativosCondicion1 GruposAlternativos[] @relation("GrupoCondicion1")
  gruposAlternativosCondicion2 GruposAlternativos[] @relation("GrupoCondicion2")
  gruposAlternativosResultante GruposAlternativos[] @relation("GrupoResultante")
  
  @@map("GRUPO")
}

model Indicacion {
  id                       Int       @id @default(autoincrement()) @map("id_indicacion")
  descripcion              String
  textoInstruccion         String    @map("texto_instruccion")
  tipoIndicacion           String?   @map("tipo_indicacion")
  area                     String?
  estado                   String    @default("ACTIVO")
  idIndicacionInferior     Int?      @map("id_indicacion_inferior")
  fechaAlta                DateTime  @default(now()) @map("fecha_alta")
  fechaBaja                DateTime? @map("fecha_baja")
  fechaUltimaModificacion  DateTime  @default(now()) @updatedAt @map("fecha_ultima_modificacion")
  
  // Relaciones
  grupos                   GrupoIndicacion[]
  indicacionSuperior       Indicacion? @relation("IndicacionPrioridad", fields: [idIndicacionInferior], references: [id])
  indicacionesInferiores   Indicacion[] @relation("IndicacionPrioridad")
  
  @@map("INDICACION")
}

model PracticaGrupo {
  idPractica        Int      @map("id_practica")
  idGrupo           Int      @map("id_grupo")
  activo            Boolean  @default(true)
  fechaVinculacion  DateTime @default(now()) @map("fecha_vinculacion")
  
  // Relaciones
  practica          Practica @relation(fields: [idPractica], references: [id], onDelete: Cascade)
  grupo             Grupo    @relation(fields: [idGrupo], references: [id], onDelete: Cascade)
  
  @@id([idPractica, idGrupo])
  @@map("PRACTICA_GRUPO")
}

model GrupoIndicacion {
  idGrupo           Int      @map("id_grupo")
  idIndicacion      Int      @map("id_indicacion")
  orden             Int      @default(1)
  activo            Boolean  @default(true)
  fechaVinculacion  DateTime @default(now()) @map("fecha_vinculacion")
  
  // Relaciones
  grupo             Grupo      @relation(fields: [idGrupo], references: [id], onDelete: Cascade)
  indicacion        Indicacion @relation(fields: [idIndicacion], references: [id], onDelete: Cascade)
  
  @@id([idGrupo, idIndicacion])
  @@map("GRUPO_INDICACION")
}

model GruposAlternativos {
  id                    Int      @id @default(autoincrement()) @map("id_grupo_alternativo")
  idGrupoCondicion1     Int      @map("id_grupo_condicion_1")
  idGrupoCondicion2     Int      @map("id_grupo_condicion_2")
  idGrupoResultante     Int      @map("id_grupo_resultante")
  descripcionCaso       String?  @map("descripcion_caso")
  activo                Boolean  @default(true)
  fechaCreacion         DateTime @default(now()) @map("fecha_creacion")
  
  // Relaciones
  grupoCondicion1       Grupo @relation("GrupoCondicion1", fields: [idGrupoCondicion1], references: [id])
  grupoCondicion2       Grupo @relation("GrupoCondicion2", fields: [idGrupoCondicion2], references: [id])
  grupoResultante       Grupo @relation("GrupoResultante", fields: [idGrupoResultante], references: [id])
  
  @@unique([idGrupoCondicion1, idGrupoCondicion2])
  @@map("GRUPOS_ALTERNATIVOS")
}
