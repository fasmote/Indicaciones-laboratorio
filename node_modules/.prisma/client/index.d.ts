
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Practica
 * 
 */
export type Practica = $Result.DefaultSelection<Prisma.$PracticaPayload>
/**
 * Model Grupo
 * 
 */
export type Grupo = $Result.DefaultSelection<Prisma.$GrupoPayload>
/**
 * Model Indicacion
 * 
 */
export type Indicacion = $Result.DefaultSelection<Prisma.$IndicacionPayload>
/**
 * Model PracticaGrupo
 * 
 */
export type PracticaGrupo = $Result.DefaultSelection<Prisma.$PracticaGrupoPayload>
/**
 * Model GrupoIndicacion
 * 
 */
export type GrupoIndicacion = $Result.DefaultSelection<Prisma.$GrupoIndicacionPayload>
/**
 * Model GruposAlternativos
 * 
 */
export type GruposAlternativos = $Result.DefaultSelection<Prisma.$GruposAlternativosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Practicas
 * const practicas = await prisma.practica.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Practicas
   * const practicas = await prisma.practica.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.practica`: Exposes CRUD operations for the **Practica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Practicas
    * const practicas = await prisma.practica.findMany()
    * ```
    */
  get practica(): Prisma.PracticaDelegate<ExtArgs>;

  /**
   * `prisma.grupo`: Exposes CRUD operations for the **Grupo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grupos
    * const grupos = await prisma.grupo.findMany()
    * ```
    */
  get grupo(): Prisma.GrupoDelegate<ExtArgs>;

  /**
   * `prisma.indicacion`: Exposes CRUD operations for the **Indicacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Indicacions
    * const indicacions = await prisma.indicacion.findMany()
    * ```
    */
  get indicacion(): Prisma.IndicacionDelegate<ExtArgs>;

  /**
   * `prisma.practicaGrupo`: Exposes CRUD operations for the **PracticaGrupo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticaGrupos
    * const practicaGrupos = await prisma.practicaGrupo.findMany()
    * ```
    */
  get practicaGrupo(): Prisma.PracticaGrupoDelegate<ExtArgs>;

  /**
   * `prisma.grupoIndicacion`: Exposes CRUD operations for the **GrupoIndicacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrupoIndicacions
    * const grupoIndicacions = await prisma.grupoIndicacion.findMany()
    * ```
    */
  get grupoIndicacion(): Prisma.GrupoIndicacionDelegate<ExtArgs>;

  /**
   * `prisma.gruposAlternativos`: Exposes CRUD operations for the **GruposAlternativos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GruposAlternativos
    * const gruposAlternativos = await prisma.gruposAlternativos.findMany()
    * ```
    */
  get gruposAlternativos(): Prisma.GruposAlternativosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Practica: 'Practica',
    Grupo: 'Grupo',
    Indicacion: 'Indicacion',
    PracticaGrupo: 'PracticaGrupo',
    GrupoIndicacion: 'GrupoIndicacion',
    GruposAlternativos: 'GruposAlternativos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "practica" | "grupo" | "indicacion" | "practicaGrupo" | "grupoIndicacion" | "gruposAlternativos"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Practica: {
        payload: Prisma.$PracticaPayload<ExtArgs>
        fields: Prisma.PracticaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          findFirst: {
            args: Prisma.PracticaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          findMany: {
            args: Prisma.PracticaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>[]
          }
          create: {
            args: Prisma.PracticaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          createMany: {
            args: Prisma.PracticaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>[]
          }
          delete: {
            args: Prisma.PracticaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          update: {
            args: Prisma.PracticaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          deleteMany: {
            args: Prisma.PracticaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PracticaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaPayload>
          }
          aggregate: {
            args: Prisma.PracticaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePractica>
          }
          groupBy: {
            args: Prisma.PracticaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticaCountArgs<ExtArgs>
            result: $Utils.Optional<PracticaCountAggregateOutputType> | number
          }
        }
      }
      Grupo: {
        payload: Prisma.$GrupoPayload<ExtArgs>
        fields: Prisma.GrupoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrupoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrupoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          findFirst: {
            args: Prisma.GrupoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrupoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          findMany: {
            args: Prisma.GrupoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>[]
          }
          create: {
            args: Prisma.GrupoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          createMany: {
            args: Prisma.GrupoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GrupoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>[]
          }
          delete: {
            args: Prisma.GrupoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          update: {
            args: Prisma.GrupoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          deleteMany: {
            args: Prisma.GrupoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrupoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrupoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoPayload>
          }
          aggregate: {
            args: Prisma.GrupoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrupo>
          }
          groupBy: {
            args: Prisma.GrupoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrupoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrupoCountArgs<ExtArgs>
            result: $Utils.Optional<GrupoCountAggregateOutputType> | number
          }
        }
      }
      Indicacion: {
        payload: Prisma.$IndicacionPayload<ExtArgs>
        fields: Prisma.IndicacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IndicacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndicacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          findFirst: {
            args: Prisma.IndicacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndicacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          findMany: {
            args: Prisma.IndicacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>[]
          }
          create: {
            args: Prisma.IndicacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          createMany: {
            args: Prisma.IndicacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IndicacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>[]
          }
          delete: {
            args: Prisma.IndicacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          update: {
            args: Prisma.IndicacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          deleteMany: {
            args: Prisma.IndicacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IndicacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IndicacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicacionPayload>
          }
          aggregate: {
            args: Prisma.IndicacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIndicacion>
          }
          groupBy: {
            args: Prisma.IndicacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<IndicacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndicacionCountArgs<ExtArgs>
            result: $Utils.Optional<IndicacionCountAggregateOutputType> | number
          }
        }
      }
      PracticaGrupo: {
        payload: Prisma.$PracticaGrupoPayload<ExtArgs>
        fields: Prisma.PracticaGrupoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticaGrupoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticaGrupoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          findFirst: {
            args: Prisma.PracticaGrupoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticaGrupoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          findMany: {
            args: Prisma.PracticaGrupoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>[]
          }
          create: {
            args: Prisma.PracticaGrupoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          createMany: {
            args: Prisma.PracticaGrupoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticaGrupoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>[]
          }
          delete: {
            args: Prisma.PracticaGrupoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          update: {
            args: Prisma.PracticaGrupoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          deleteMany: {
            args: Prisma.PracticaGrupoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticaGrupoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PracticaGrupoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticaGrupoPayload>
          }
          aggregate: {
            args: Prisma.PracticaGrupoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticaGrupo>
          }
          groupBy: {
            args: Prisma.PracticaGrupoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticaGrupoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticaGrupoCountArgs<ExtArgs>
            result: $Utils.Optional<PracticaGrupoCountAggregateOutputType> | number
          }
        }
      }
      GrupoIndicacion: {
        payload: Prisma.$GrupoIndicacionPayload<ExtArgs>
        fields: Prisma.GrupoIndicacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrupoIndicacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrupoIndicacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          findFirst: {
            args: Prisma.GrupoIndicacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrupoIndicacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          findMany: {
            args: Prisma.GrupoIndicacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>[]
          }
          create: {
            args: Prisma.GrupoIndicacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          createMany: {
            args: Prisma.GrupoIndicacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GrupoIndicacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>[]
          }
          delete: {
            args: Prisma.GrupoIndicacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          update: {
            args: Prisma.GrupoIndicacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          deleteMany: {
            args: Prisma.GrupoIndicacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrupoIndicacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrupoIndicacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoIndicacionPayload>
          }
          aggregate: {
            args: Prisma.GrupoIndicacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrupoIndicacion>
          }
          groupBy: {
            args: Prisma.GrupoIndicacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrupoIndicacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrupoIndicacionCountArgs<ExtArgs>
            result: $Utils.Optional<GrupoIndicacionCountAggregateOutputType> | number
          }
        }
      }
      GruposAlternativos: {
        payload: Prisma.$GruposAlternativosPayload<ExtArgs>
        fields: Prisma.GruposAlternativosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GruposAlternativosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GruposAlternativosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          findFirst: {
            args: Prisma.GruposAlternativosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GruposAlternativosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          findMany: {
            args: Prisma.GruposAlternativosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>[]
          }
          create: {
            args: Prisma.GruposAlternativosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          createMany: {
            args: Prisma.GruposAlternativosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GruposAlternativosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>[]
          }
          delete: {
            args: Prisma.GruposAlternativosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          update: {
            args: Prisma.GruposAlternativosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          deleteMany: {
            args: Prisma.GruposAlternativosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GruposAlternativosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GruposAlternativosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GruposAlternativosPayload>
          }
          aggregate: {
            args: Prisma.GruposAlternativosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGruposAlternativos>
          }
          groupBy: {
            args: Prisma.GruposAlternativosGroupByArgs<ExtArgs>
            result: $Utils.Optional<GruposAlternativosGroupByOutputType>[]
          }
          count: {
            args: Prisma.GruposAlternativosCountArgs<ExtArgs>
            result: $Utils.Optional<GruposAlternativosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PracticaCountOutputType
   */

  export type PracticaCountOutputType = {
    grupos: number
  }

  export type PracticaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupos?: boolean | PracticaCountOutputTypeCountGruposArgs
  }

  // Custom InputTypes
  /**
   * PracticaCountOutputType without action
   */
  export type PracticaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaCountOutputType
     */
    select?: PracticaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PracticaCountOutputType without action
   */
  export type PracticaCountOutputTypeCountGruposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticaGrupoWhereInput
  }


  /**
   * Count Type GrupoCountOutputType
   */

  export type GrupoCountOutputType = {
    practicas: number
    indicaciones: number
    gruposAlternativosCondicion1: number
    gruposAlternativosCondicion2: number
    gruposAlternativosResultante: number
  }

  export type GrupoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practicas?: boolean | GrupoCountOutputTypeCountPracticasArgs
    indicaciones?: boolean | GrupoCountOutputTypeCountIndicacionesArgs
    gruposAlternativosCondicion1?: boolean | GrupoCountOutputTypeCountGruposAlternativosCondicion1Args
    gruposAlternativosCondicion2?: boolean | GrupoCountOutputTypeCountGruposAlternativosCondicion2Args
    gruposAlternativosResultante?: boolean | GrupoCountOutputTypeCountGruposAlternativosResultanteArgs
  }

  // Custom InputTypes
  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoCountOutputType
     */
    select?: GrupoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeCountPracticasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticaGrupoWhereInput
  }

  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeCountIndicacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoIndicacionWhereInput
  }

  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeCountGruposAlternativosCondicion1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GruposAlternativosWhereInput
  }

  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeCountGruposAlternativosCondicion2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GruposAlternativosWhereInput
  }

  /**
   * GrupoCountOutputType without action
   */
  export type GrupoCountOutputTypeCountGruposAlternativosResultanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GruposAlternativosWhereInput
  }


  /**
   * Count Type IndicacionCountOutputType
   */

  export type IndicacionCountOutputType = {
    grupos: number
    indicacionesInferiores: number
  }

  export type IndicacionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupos?: boolean | IndicacionCountOutputTypeCountGruposArgs
    indicacionesInferiores?: boolean | IndicacionCountOutputTypeCountIndicacionesInferioresArgs
  }

  // Custom InputTypes
  /**
   * IndicacionCountOutputType without action
   */
  export type IndicacionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicacionCountOutputType
     */
    select?: IndicacionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IndicacionCountOutputType without action
   */
  export type IndicacionCountOutputTypeCountGruposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoIndicacionWhereInput
  }

  /**
   * IndicacionCountOutputType without action
   */
  export type IndicacionCountOutputTypeCountIndicacionesInferioresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndicacionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Practica
   */

  export type AggregatePractica = {
    _count: PracticaCountAggregateOutputType | null
    _avg: PracticaAvgAggregateOutputType | null
    _sum: PracticaSumAggregateOutputType | null
    _min: PracticaMinAggregateOutputType | null
    _max: PracticaMaxAggregateOutputType | null
  }

  export type PracticaAvgAggregateOutputType = {
    id: number | null
  }

  export type PracticaSumAggregateOutputType = {
    id: number | null
  }

  export type PracticaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    codigo: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type PracticaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    codigo: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type PracticaCountAggregateOutputType = {
    id: number
    nombre: number
    codigo: number
    activo: number
    fechaCreacion: number
    _all: number
  }


  export type PracticaAvgAggregateInputType = {
    id?: true
  }

  export type PracticaSumAggregateInputType = {
    id?: true
  }

  export type PracticaMinAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    activo?: true
    fechaCreacion?: true
  }

  export type PracticaMaxAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    activo?: true
    fechaCreacion?: true
  }

  export type PracticaCountAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    activo?: true
    fechaCreacion?: true
    _all?: true
  }

  export type PracticaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practica to aggregate.
     */
    where?: PracticaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practicas to fetch.
     */
    orderBy?: PracticaOrderByWithRelationInput | PracticaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Practicas
    **/
    _count?: true | PracticaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticaMaxAggregateInputType
  }

  export type GetPracticaAggregateType<T extends PracticaAggregateArgs> = {
        [P in keyof T & keyof AggregatePractica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePractica[P]>
      : GetScalarType<T[P], AggregatePractica[P]>
  }




  export type PracticaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticaWhereInput
    orderBy?: PracticaOrderByWithAggregationInput | PracticaOrderByWithAggregationInput[]
    by: PracticaScalarFieldEnum[] | PracticaScalarFieldEnum
    having?: PracticaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticaCountAggregateInputType | true
    _avg?: PracticaAvgAggregateInputType
    _sum?: PracticaSumAggregateInputType
    _min?: PracticaMinAggregateInputType
    _max?: PracticaMaxAggregateInputType
  }

  export type PracticaGroupByOutputType = {
    id: number
    nombre: string
    codigo: string
    activo: boolean
    fechaCreacion: Date
    _count: PracticaCountAggregateOutputType | null
    _avg: PracticaAvgAggregateOutputType | null
    _sum: PracticaSumAggregateOutputType | null
    _min: PracticaMinAggregateOutputType | null
    _max: PracticaMaxAggregateOutputType | null
  }

  type GetPracticaGroupByPayload<T extends PracticaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticaGroupByOutputType[P]>
            : GetScalarType<T[P], PracticaGroupByOutputType[P]>
        }
      >
    >


  export type PracticaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    activo?: boolean
    fechaCreacion?: boolean
    grupos?: boolean | Practica$gruposArgs<ExtArgs>
    _count?: boolean | PracticaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practica"]>

  export type PracticaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }, ExtArgs["result"]["practica"]>

  export type PracticaSelectScalar = {
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }

  export type PracticaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupos?: boolean | Practica$gruposArgs<ExtArgs>
    _count?: boolean | PracticaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PracticaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PracticaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Practica"
    objects: {
      grupos: Prisma.$PracticaGrupoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      codigo: string
      activo: boolean
      fechaCreacion: Date
    }, ExtArgs["result"]["practica"]>
    composites: {}
  }

  type PracticaGetPayload<S extends boolean | null | undefined | PracticaDefaultArgs> = $Result.GetResult<Prisma.$PracticaPayload, S>

  type PracticaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PracticaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PracticaCountAggregateInputType | true
    }

  export interface PracticaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Practica'], meta: { name: 'Practica' } }
    /**
     * Find zero or one Practica that matches the filter.
     * @param {PracticaFindUniqueArgs} args - Arguments to find a Practica
     * @example
     * // Get one Practica
     * const practica = await prisma.practica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticaFindUniqueArgs>(args: SelectSubset<T, PracticaFindUniqueArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Practica that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PracticaFindUniqueOrThrowArgs} args - Arguments to find a Practica
     * @example
     * // Get one Practica
     * const practica = await prisma.practica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticaFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Practica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaFindFirstArgs} args - Arguments to find a Practica
     * @example
     * // Get one Practica
     * const practica = await prisma.practica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticaFindFirstArgs>(args?: SelectSubset<T, PracticaFindFirstArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Practica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaFindFirstOrThrowArgs} args - Arguments to find a Practica
     * @example
     * // Get one Practica
     * const practica = await prisma.practica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticaFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Practicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Practicas
     * const practicas = await prisma.practica.findMany()
     * 
     * // Get first 10 Practicas
     * const practicas = await prisma.practica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practicaWithIdOnly = await prisma.practica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticaFindManyArgs>(args?: SelectSubset<T, PracticaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Practica.
     * @param {PracticaCreateArgs} args - Arguments to create a Practica.
     * @example
     * // Create one Practica
     * const Practica = await prisma.practica.create({
     *   data: {
     *     // ... data to create a Practica
     *   }
     * })
     * 
     */
    create<T extends PracticaCreateArgs>(args: SelectSubset<T, PracticaCreateArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Practicas.
     * @param {PracticaCreateManyArgs} args - Arguments to create many Practicas.
     * @example
     * // Create many Practicas
     * const practica = await prisma.practica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticaCreateManyArgs>(args?: SelectSubset<T, PracticaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Practicas and returns the data saved in the database.
     * @param {PracticaCreateManyAndReturnArgs} args - Arguments to create many Practicas.
     * @example
     * // Create many Practicas
     * const practica = await prisma.practica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Practicas and only return the `id`
     * const practicaWithIdOnly = await prisma.practica.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticaCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Practica.
     * @param {PracticaDeleteArgs} args - Arguments to delete one Practica.
     * @example
     * // Delete one Practica
     * const Practica = await prisma.practica.delete({
     *   where: {
     *     // ... filter to delete one Practica
     *   }
     * })
     * 
     */
    delete<T extends PracticaDeleteArgs>(args: SelectSubset<T, PracticaDeleteArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Practica.
     * @param {PracticaUpdateArgs} args - Arguments to update one Practica.
     * @example
     * // Update one Practica
     * const practica = await prisma.practica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticaUpdateArgs>(args: SelectSubset<T, PracticaUpdateArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Practicas.
     * @param {PracticaDeleteManyArgs} args - Arguments to filter Practicas to delete.
     * @example
     * // Delete a few Practicas
     * const { count } = await prisma.practica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticaDeleteManyArgs>(args?: SelectSubset<T, PracticaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Practicas
     * const practica = await prisma.practica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticaUpdateManyArgs>(args: SelectSubset<T, PracticaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Practica.
     * @param {PracticaUpsertArgs} args - Arguments to update or create a Practica.
     * @example
     * // Update or create a Practica
     * const practica = await prisma.practica.upsert({
     *   create: {
     *     // ... data to create a Practica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Practica we want to update
     *   }
     * })
     */
    upsert<T extends PracticaUpsertArgs>(args: SelectSubset<T, PracticaUpsertArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Practicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaCountArgs} args - Arguments to filter Practicas to count.
     * @example
     * // Count the number of Practicas
     * const count = await prisma.practica.count({
     *   where: {
     *     // ... the filter for the Practicas we want to count
     *   }
     * })
    **/
    count<T extends PracticaCountArgs>(
      args?: Subset<T, PracticaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Practica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticaAggregateArgs>(args: Subset<T, PracticaAggregateArgs>): Prisma.PrismaPromise<GetPracticaAggregateType<T>>

    /**
     * Group by Practica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticaGroupByArgs['orderBy'] }
        : { orderBy?: PracticaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Practica model
   */
  readonly fields: PracticaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Practica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupos<T extends Practica$gruposArgs<ExtArgs> = {}>(args?: Subset<T, Practica$gruposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Practica model
   */ 
  interface PracticaFieldRefs {
    readonly id: FieldRef<"Practica", 'Int'>
    readonly nombre: FieldRef<"Practica", 'String'>
    readonly codigo: FieldRef<"Practica", 'String'>
    readonly activo: FieldRef<"Practica", 'Boolean'>
    readonly fechaCreacion: FieldRef<"Practica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Practica findUnique
   */
  export type PracticaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter, which Practica to fetch.
     */
    where: PracticaWhereUniqueInput
  }

  /**
   * Practica findUniqueOrThrow
   */
  export type PracticaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter, which Practica to fetch.
     */
    where: PracticaWhereUniqueInput
  }

  /**
   * Practica findFirst
   */
  export type PracticaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter, which Practica to fetch.
     */
    where?: PracticaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practicas to fetch.
     */
    orderBy?: PracticaOrderByWithRelationInput | PracticaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practicas.
     */
    cursor?: PracticaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practicas.
     */
    distinct?: PracticaScalarFieldEnum | PracticaScalarFieldEnum[]
  }

  /**
   * Practica findFirstOrThrow
   */
  export type PracticaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter, which Practica to fetch.
     */
    where?: PracticaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practicas to fetch.
     */
    orderBy?: PracticaOrderByWithRelationInput | PracticaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practicas.
     */
    cursor?: PracticaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practicas.
     */
    distinct?: PracticaScalarFieldEnum | PracticaScalarFieldEnum[]
  }

  /**
   * Practica findMany
   */
  export type PracticaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter, which Practicas to fetch.
     */
    where?: PracticaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practicas to fetch.
     */
    orderBy?: PracticaOrderByWithRelationInput | PracticaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Practicas.
     */
    cursor?: PracticaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practicas.
     */
    skip?: number
    distinct?: PracticaScalarFieldEnum | PracticaScalarFieldEnum[]
  }

  /**
   * Practica create
   */
  export type PracticaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * The data needed to create a Practica.
     */
    data: XOR<PracticaCreateInput, PracticaUncheckedCreateInput>
  }

  /**
   * Practica createMany
   */
  export type PracticaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Practicas.
     */
    data: PracticaCreateManyInput | PracticaCreateManyInput[]
  }

  /**
   * Practica createManyAndReturn
   */
  export type PracticaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Practicas.
     */
    data: PracticaCreateManyInput | PracticaCreateManyInput[]
  }

  /**
   * Practica update
   */
  export type PracticaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * The data needed to update a Practica.
     */
    data: XOR<PracticaUpdateInput, PracticaUncheckedUpdateInput>
    /**
     * Choose, which Practica to update.
     */
    where: PracticaWhereUniqueInput
  }

  /**
   * Practica updateMany
   */
  export type PracticaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Practicas.
     */
    data: XOR<PracticaUpdateManyMutationInput, PracticaUncheckedUpdateManyInput>
    /**
     * Filter which Practicas to update
     */
    where?: PracticaWhereInput
  }

  /**
   * Practica upsert
   */
  export type PracticaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * The filter to search for the Practica to update in case it exists.
     */
    where: PracticaWhereUniqueInput
    /**
     * In case the Practica found by the `where` argument doesn't exist, create a new Practica with this data.
     */
    create: XOR<PracticaCreateInput, PracticaUncheckedCreateInput>
    /**
     * In case the Practica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticaUpdateInput, PracticaUncheckedUpdateInput>
  }

  /**
   * Practica delete
   */
  export type PracticaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
    /**
     * Filter which Practica to delete.
     */
    where: PracticaWhereUniqueInput
  }

  /**
   * Practica deleteMany
   */
  export type PracticaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practicas to delete
     */
    where?: PracticaWhereInput
  }

  /**
   * Practica.grupos
   */
  export type Practica$gruposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    where?: PracticaGrupoWhereInput
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    cursor?: PracticaGrupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticaGrupoScalarFieldEnum | PracticaGrupoScalarFieldEnum[]
  }

  /**
   * Practica without action
   */
  export type PracticaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practica
     */
    select?: PracticaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaInclude<ExtArgs> | null
  }


  /**
   * Model Grupo
   */

  export type AggregateGrupo = {
    _count: GrupoCountAggregateOutputType | null
    _avg: GrupoAvgAggregateOutputType | null
    _sum: GrupoSumAggregateOutputType | null
    _min: GrupoMinAggregateOutputType | null
    _max: GrupoMaxAggregateOutputType | null
  }

  export type GrupoAvgAggregateOutputType = {
    id: number | null
    ayunoHoras: number | null
    orinaHoras: number | null
  }

  export type GrupoSumAggregateOutputType = {
    id: number | null
    ayunoHoras: number | null
    orinaHoras: number | null
  }

  export type GrupoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    ayunoHoras: number | null
    orinaHoras: number | null
    orinaTipo: string | null
    activo: boolean | null
    fechaAlta: Date | null
    fechaBaja: Date | null
    fechaUltimaModificacion: Date | null
  }

  export type GrupoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    ayunoHoras: number | null
    orinaHoras: number | null
    orinaTipo: string | null
    activo: boolean | null
    fechaAlta: Date | null
    fechaBaja: Date | null
    fechaUltimaModificacion: Date | null
  }

  export type GrupoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    ayunoHoras: number
    orinaHoras: number
    orinaTipo: number
    activo: number
    fechaAlta: number
    fechaBaja: number
    fechaUltimaModificacion: number
    _all: number
  }


  export type GrupoAvgAggregateInputType = {
    id?: true
    ayunoHoras?: true
    orinaHoras?: true
  }

  export type GrupoSumAggregateInputType = {
    id?: true
    ayunoHoras?: true
    orinaHoras?: true
  }

  export type GrupoMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    ayunoHoras?: true
    orinaHoras?: true
    orinaTipo?: true
    activo?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
  }

  export type GrupoMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    ayunoHoras?: true
    orinaHoras?: true
    orinaTipo?: true
    activo?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
  }

  export type GrupoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    ayunoHoras?: true
    orinaHoras?: true
    orinaTipo?: true
    activo?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
    _all?: true
  }

  export type GrupoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grupo to aggregate.
     */
    where?: GrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grupos to fetch.
     */
    orderBy?: GrupoOrderByWithRelationInput | GrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grupos
    **/
    _count?: true | GrupoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrupoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrupoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrupoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrupoMaxAggregateInputType
  }

  export type GetGrupoAggregateType<T extends GrupoAggregateArgs> = {
        [P in keyof T & keyof AggregateGrupo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrupo[P]>
      : GetScalarType<T[P], AggregateGrupo[P]>
  }




  export type GrupoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoWhereInput
    orderBy?: GrupoOrderByWithAggregationInput | GrupoOrderByWithAggregationInput[]
    by: GrupoScalarFieldEnum[] | GrupoScalarFieldEnum
    having?: GrupoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrupoCountAggregateInputType | true
    _avg?: GrupoAvgAggregateInputType
    _sum?: GrupoSumAggregateInputType
    _min?: GrupoMinAggregateInputType
    _max?: GrupoMaxAggregateInputType
  }

  export type GrupoGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    ayunoHoras: number | null
    orinaHoras: number | null
    orinaTipo: string | null
    activo: boolean
    fechaAlta: Date
    fechaBaja: Date | null
    fechaUltimaModificacion: Date
    _count: GrupoCountAggregateOutputType | null
    _avg: GrupoAvgAggregateOutputType | null
    _sum: GrupoSumAggregateOutputType | null
    _min: GrupoMinAggregateOutputType | null
    _max: GrupoMaxAggregateOutputType | null
  }

  type GetGrupoGroupByPayload<T extends GrupoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrupoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrupoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrupoGroupByOutputType[P]>
            : GetScalarType<T[P], GrupoGroupByOutputType[P]>
        }
      >
    >


  export type GrupoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    ayunoHoras?: boolean
    orinaHoras?: boolean
    orinaTipo?: boolean
    activo?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
    practicas?: boolean | Grupo$practicasArgs<ExtArgs>
    indicaciones?: boolean | Grupo$indicacionesArgs<ExtArgs>
    gruposAlternativosCondicion1?: boolean | Grupo$gruposAlternativosCondicion1Args<ExtArgs>
    gruposAlternativosCondicion2?: boolean | Grupo$gruposAlternativosCondicion2Args<ExtArgs>
    gruposAlternativosResultante?: boolean | Grupo$gruposAlternativosResultanteArgs<ExtArgs>
    _count?: boolean | GrupoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupo"]>

  export type GrupoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    ayunoHoras?: boolean
    orinaHoras?: boolean
    orinaTipo?: boolean
    activo?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
  }, ExtArgs["result"]["grupo"]>

  export type GrupoSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    ayunoHoras?: boolean
    orinaHoras?: boolean
    orinaTipo?: boolean
    activo?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
  }

  export type GrupoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practicas?: boolean | Grupo$practicasArgs<ExtArgs>
    indicaciones?: boolean | Grupo$indicacionesArgs<ExtArgs>
    gruposAlternativosCondicion1?: boolean | Grupo$gruposAlternativosCondicion1Args<ExtArgs>
    gruposAlternativosCondicion2?: boolean | Grupo$gruposAlternativosCondicion2Args<ExtArgs>
    gruposAlternativosResultante?: boolean | Grupo$gruposAlternativosResultanteArgs<ExtArgs>
    _count?: boolean | GrupoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GrupoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GrupoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grupo"
    objects: {
      practicas: Prisma.$PracticaGrupoPayload<ExtArgs>[]
      indicaciones: Prisma.$GrupoIndicacionPayload<ExtArgs>[]
      gruposAlternativosCondicion1: Prisma.$GruposAlternativosPayload<ExtArgs>[]
      gruposAlternativosCondicion2: Prisma.$GruposAlternativosPayload<ExtArgs>[]
      gruposAlternativosResultante: Prisma.$GruposAlternativosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      ayunoHoras: number | null
      orinaHoras: number | null
      orinaTipo: string | null
      activo: boolean
      fechaAlta: Date
      fechaBaja: Date | null
      fechaUltimaModificacion: Date
    }, ExtArgs["result"]["grupo"]>
    composites: {}
  }

  type GrupoGetPayload<S extends boolean | null | undefined | GrupoDefaultArgs> = $Result.GetResult<Prisma.$GrupoPayload, S>

  type GrupoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrupoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrupoCountAggregateInputType | true
    }

  export interface GrupoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grupo'], meta: { name: 'Grupo' } }
    /**
     * Find zero or one Grupo that matches the filter.
     * @param {GrupoFindUniqueArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrupoFindUniqueArgs>(args: SelectSubset<T, GrupoFindUniqueArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Grupo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrupoFindUniqueOrThrowArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrupoFindUniqueOrThrowArgs>(args: SelectSubset<T, GrupoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Grupo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFindFirstArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrupoFindFirstArgs>(args?: SelectSubset<T, GrupoFindFirstArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Grupo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFindFirstOrThrowArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrupoFindFirstOrThrowArgs>(args?: SelectSubset<T, GrupoFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Grupos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grupos
     * const grupos = await prisma.grupo.findMany()
     * 
     * // Get first 10 Grupos
     * const grupos = await prisma.grupo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grupoWithIdOnly = await prisma.grupo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrupoFindManyArgs>(args?: SelectSubset<T, GrupoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Grupo.
     * @param {GrupoCreateArgs} args - Arguments to create a Grupo.
     * @example
     * // Create one Grupo
     * const Grupo = await prisma.grupo.create({
     *   data: {
     *     // ... data to create a Grupo
     *   }
     * })
     * 
     */
    create<T extends GrupoCreateArgs>(args: SelectSubset<T, GrupoCreateArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Grupos.
     * @param {GrupoCreateManyArgs} args - Arguments to create many Grupos.
     * @example
     * // Create many Grupos
     * const grupo = await prisma.grupo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrupoCreateManyArgs>(args?: SelectSubset<T, GrupoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grupos and returns the data saved in the database.
     * @param {GrupoCreateManyAndReturnArgs} args - Arguments to create many Grupos.
     * @example
     * // Create many Grupos
     * const grupo = await prisma.grupo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grupos and only return the `id`
     * const grupoWithIdOnly = await prisma.grupo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GrupoCreateManyAndReturnArgs>(args?: SelectSubset<T, GrupoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Grupo.
     * @param {GrupoDeleteArgs} args - Arguments to delete one Grupo.
     * @example
     * // Delete one Grupo
     * const Grupo = await prisma.grupo.delete({
     *   where: {
     *     // ... filter to delete one Grupo
     *   }
     * })
     * 
     */
    delete<T extends GrupoDeleteArgs>(args: SelectSubset<T, GrupoDeleteArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Grupo.
     * @param {GrupoUpdateArgs} args - Arguments to update one Grupo.
     * @example
     * // Update one Grupo
     * const grupo = await prisma.grupo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrupoUpdateArgs>(args: SelectSubset<T, GrupoUpdateArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Grupos.
     * @param {GrupoDeleteManyArgs} args - Arguments to filter Grupos to delete.
     * @example
     * // Delete a few Grupos
     * const { count } = await prisma.grupo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrupoDeleteManyArgs>(args?: SelectSubset<T, GrupoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grupos
     * const grupo = await prisma.grupo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrupoUpdateManyArgs>(args: SelectSubset<T, GrupoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grupo.
     * @param {GrupoUpsertArgs} args - Arguments to update or create a Grupo.
     * @example
     * // Update or create a Grupo
     * const grupo = await prisma.grupo.upsert({
     *   create: {
     *     // ... data to create a Grupo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grupo we want to update
     *   }
     * })
     */
    upsert<T extends GrupoUpsertArgs>(args: SelectSubset<T, GrupoUpsertArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Grupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoCountArgs} args - Arguments to filter Grupos to count.
     * @example
     * // Count the number of Grupos
     * const count = await prisma.grupo.count({
     *   where: {
     *     // ... the filter for the Grupos we want to count
     *   }
     * })
    **/
    count<T extends GrupoCountArgs>(
      args?: Subset<T, GrupoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrupoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrupoAggregateArgs>(args: Subset<T, GrupoAggregateArgs>): Prisma.PrismaPromise<GetGrupoAggregateType<T>>

    /**
     * Group by Grupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrupoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrupoGroupByArgs['orderBy'] }
        : { orderBy?: GrupoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrupoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrupoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grupo model
   */
  readonly fields: GrupoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grupo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrupoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practicas<T extends Grupo$practicasArgs<ExtArgs> = {}>(args?: Subset<T, Grupo$practicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findMany"> | Null>
    indicaciones<T extends Grupo$indicacionesArgs<ExtArgs> = {}>(args?: Subset<T, Grupo$indicacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findMany"> | Null>
    gruposAlternativosCondicion1<T extends Grupo$gruposAlternativosCondicion1Args<ExtArgs> = {}>(args?: Subset<T, Grupo$gruposAlternativosCondicion1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findMany"> | Null>
    gruposAlternativosCondicion2<T extends Grupo$gruposAlternativosCondicion2Args<ExtArgs> = {}>(args?: Subset<T, Grupo$gruposAlternativosCondicion2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findMany"> | Null>
    gruposAlternativosResultante<T extends Grupo$gruposAlternativosResultanteArgs<ExtArgs> = {}>(args?: Subset<T, Grupo$gruposAlternativosResultanteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grupo model
   */ 
  interface GrupoFieldRefs {
    readonly id: FieldRef<"Grupo", 'Int'>
    readonly nombre: FieldRef<"Grupo", 'String'>
    readonly descripcion: FieldRef<"Grupo", 'String'>
    readonly ayunoHoras: FieldRef<"Grupo", 'Int'>
    readonly orinaHoras: FieldRef<"Grupo", 'Int'>
    readonly orinaTipo: FieldRef<"Grupo", 'String'>
    readonly activo: FieldRef<"Grupo", 'Boolean'>
    readonly fechaAlta: FieldRef<"Grupo", 'DateTime'>
    readonly fechaBaja: FieldRef<"Grupo", 'DateTime'>
    readonly fechaUltimaModificacion: FieldRef<"Grupo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Grupo findUnique
   */
  export type GrupoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter, which Grupo to fetch.
     */
    where: GrupoWhereUniqueInput
  }

  /**
   * Grupo findUniqueOrThrow
   */
  export type GrupoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter, which Grupo to fetch.
     */
    where: GrupoWhereUniqueInput
  }

  /**
   * Grupo findFirst
   */
  export type GrupoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter, which Grupo to fetch.
     */
    where?: GrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grupos to fetch.
     */
    orderBy?: GrupoOrderByWithRelationInput | GrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grupos.
     */
    cursor?: GrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grupos.
     */
    distinct?: GrupoScalarFieldEnum | GrupoScalarFieldEnum[]
  }

  /**
   * Grupo findFirstOrThrow
   */
  export type GrupoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter, which Grupo to fetch.
     */
    where?: GrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grupos to fetch.
     */
    orderBy?: GrupoOrderByWithRelationInput | GrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grupos.
     */
    cursor?: GrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grupos.
     */
    distinct?: GrupoScalarFieldEnum | GrupoScalarFieldEnum[]
  }

  /**
   * Grupo findMany
   */
  export type GrupoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter, which Grupos to fetch.
     */
    where?: GrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grupos to fetch.
     */
    orderBy?: GrupoOrderByWithRelationInput | GrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grupos.
     */
    cursor?: GrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grupos.
     */
    skip?: number
    distinct?: GrupoScalarFieldEnum | GrupoScalarFieldEnum[]
  }

  /**
   * Grupo create
   */
  export type GrupoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * The data needed to create a Grupo.
     */
    data: XOR<GrupoCreateInput, GrupoUncheckedCreateInput>
  }

  /**
   * Grupo createMany
   */
  export type GrupoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grupos.
     */
    data: GrupoCreateManyInput | GrupoCreateManyInput[]
  }

  /**
   * Grupo createManyAndReturn
   */
  export type GrupoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Grupos.
     */
    data: GrupoCreateManyInput | GrupoCreateManyInput[]
  }

  /**
   * Grupo update
   */
  export type GrupoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * The data needed to update a Grupo.
     */
    data: XOR<GrupoUpdateInput, GrupoUncheckedUpdateInput>
    /**
     * Choose, which Grupo to update.
     */
    where: GrupoWhereUniqueInput
  }

  /**
   * Grupo updateMany
   */
  export type GrupoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grupos.
     */
    data: XOR<GrupoUpdateManyMutationInput, GrupoUncheckedUpdateManyInput>
    /**
     * Filter which Grupos to update
     */
    where?: GrupoWhereInput
  }

  /**
   * Grupo upsert
   */
  export type GrupoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * The filter to search for the Grupo to update in case it exists.
     */
    where: GrupoWhereUniqueInput
    /**
     * In case the Grupo found by the `where` argument doesn't exist, create a new Grupo with this data.
     */
    create: XOR<GrupoCreateInput, GrupoUncheckedCreateInput>
    /**
     * In case the Grupo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrupoUpdateInput, GrupoUncheckedUpdateInput>
  }

  /**
   * Grupo delete
   */
  export type GrupoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
    /**
     * Filter which Grupo to delete.
     */
    where: GrupoWhereUniqueInput
  }

  /**
   * Grupo deleteMany
   */
  export type GrupoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grupos to delete
     */
    where?: GrupoWhereInput
  }

  /**
   * Grupo.practicas
   */
  export type Grupo$practicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    where?: PracticaGrupoWhereInput
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    cursor?: PracticaGrupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticaGrupoScalarFieldEnum | PracticaGrupoScalarFieldEnum[]
  }

  /**
   * Grupo.indicaciones
   */
  export type Grupo$indicacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    where?: GrupoIndicacionWhereInput
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    cursor?: GrupoIndicacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrupoIndicacionScalarFieldEnum | GrupoIndicacionScalarFieldEnum[]
  }

  /**
   * Grupo.gruposAlternativosCondicion1
   */
  export type Grupo$gruposAlternativosCondicion1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    where?: GruposAlternativosWhereInput
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    cursor?: GruposAlternativosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * Grupo.gruposAlternativosCondicion2
   */
  export type Grupo$gruposAlternativosCondicion2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    where?: GruposAlternativosWhereInput
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    cursor?: GruposAlternativosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * Grupo.gruposAlternativosResultante
   */
  export type Grupo$gruposAlternativosResultanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    where?: GruposAlternativosWhereInput
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    cursor?: GruposAlternativosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * Grupo without action
   */
  export type GrupoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grupo
     */
    select?: GrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoInclude<ExtArgs> | null
  }


  /**
   * Model Indicacion
   */

  export type AggregateIndicacion = {
    _count: IndicacionCountAggregateOutputType | null
    _avg: IndicacionAvgAggregateOutputType | null
    _sum: IndicacionSumAggregateOutputType | null
    _min: IndicacionMinAggregateOutputType | null
    _max: IndicacionMaxAggregateOutputType | null
  }

  export type IndicacionAvgAggregateOutputType = {
    id: number | null
    idIndicacionInferior: number | null
  }

  export type IndicacionSumAggregateOutputType = {
    id: number | null
    idIndicacionInferior: number | null
  }

  export type IndicacionMinAggregateOutputType = {
    id: number | null
    descripcion: string | null
    textoInstruccion: string | null
    tipoIndicacion: string | null
    area: string | null
    estado: string | null
    idIndicacionInferior: number | null
    fechaAlta: Date | null
    fechaBaja: Date | null
    fechaUltimaModificacion: Date | null
  }

  export type IndicacionMaxAggregateOutputType = {
    id: number | null
    descripcion: string | null
    textoInstruccion: string | null
    tipoIndicacion: string | null
    area: string | null
    estado: string | null
    idIndicacionInferior: number | null
    fechaAlta: Date | null
    fechaBaja: Date | null
    fechaUltimaModificacion: Date | null
  }

  export type IndicacionCountAggregateOutputType = {
    id: number
    descripcion: number
    textoInstruccion: number
    tipoIndicacion: number
    area: number
    estado: number
    idIndicacionInferior: number
    fechaAlta: number
    fechaBaja: number
    fechaUltimaModificacion: number
    _all: number
  }


  export type IndicacionAvgAggregateInputType = {
    id?: true
    idIndicacionInferior?: true
  }

  export type IndicacionSumAggregateInputType = {
    id?: true
    idIndicacionInferior?: true
  }

  export type IndicacionMinAggregateInputType = {
    id?: true
    descripcion?: true
    textoInstruccion?: true
    tipoIndicacion?: true
    area?: true
    estado?: true
    idIndicacionInferior?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
  }

  export type IndicacionMaxAggregateInputType = {
    id?: true
    descripcion?: true
    textoInstruccion?: true
    tipoIndicacion?: true
    area?: true
    estado?: true
    idIndicacionInferior?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
  }

  export type IndicacionCountAggregateInputType = {
    id?: true
    descripcion?: true
    textoInstruccion?: true
    tipoIndicacion?: true
    area?: true
    estado?: true
    idIndicacionInferior?: true
    fechaAlta?: true
    fechaBaja?: true
    fechaUltimaModificacion?: true
    _all?: true
  }

  export type IndicacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Indicacion to aggregate.
     */
    where?: IndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicacions to fetch.
     */
    orderBy?: IndicacionOrderByWithRelationInput | IndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Indicacions
    **/
    _count?: true | IndicacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IndicacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IndicacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndicacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndicacionMaxAggregateInputType
  }

  export type GetIndicacionAggregateType<T extends IndicacionAggregateArgs> = {
        [P in keyof T & keyof AggregateIndicacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndicacion[P]>
      : GetScalarType<T[P], AggregateIndicacion[P]>
  }




  export type IndicacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndicacionWhereInput
    orderBy?: IndicacionOrderByWithAggregationInput | IndicacionOrderByWithAggregationInput[]
    by: IndicacionScalarFieldEnum[] | IndicacionScalarFieldEnum
    having?: IndicacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndicacionCountAggregateInputType | true
    _avg?: IndicacionAvgAggregateInputType
    _sum?: IndicacionSumAggregateInputType
    _min?: IndicacionMinAggregateInputType
    _max?: IndicacionMaxAggregateInputType
  }

  export type IndicacionGroupByOutputType = {
    id: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion: string | null
    area: string | null
    estado: string
    idIndicacionInferior: number | null
    fechaAlta: Date
    fechaBaja: Date | null
    fechaUltimaModificacion: Date
    _count: IndicacionCountAggregateOutputType | null
    _avg: IndicacionAvgAggregateOutputType | null
    _sum: IndicacionSumAggregateOutputType | null
    _min: IndicacionMinAggregateOutputType | null
    _max: IndicacionMaxAggregateOutputType | null
  }

  type GetIndicacionGroupByPayload<T extends IndicacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IndicacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndicacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndicacionGroupByOutputType[P]>
            : GetScalarType<T[P], IndicacionGroupByOutputType[P]>
        }
      >
    >


  export type IndicacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    textoInstruccion?: boolean
    tipoIndicacion?: boolean
    area?: boolean
    estado?: boolean
    idIndicacionInferior?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
    grupos?: boolean | Indicacion$gruposArgs<ExtArgs>
    indicacionSuperior?: boolean | Indicacion$indicacionSuperiorArgs<ExtArgs>
    indicacionesInferiores?: boolean | Indicacion$indicacionesInferioresArgs<ExtArgs>
    _count?: boolean | IndicacionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["indicacion"]>

  export type IndicacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descripcion?: boolean
    textoInstruccion?: boolean
    tipoIndicacion?: boolean
    area?: boolean
    estado?: boolean
    idIndicacionInferior?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
    indicacionSuperior?: boolean | Indicacion$indicacionSuperiorArgs<ExtArgs>
  }, ExtArgs["result"]["indicacion"]>

  export type IndicacionSelectScalar = {
    id?: boolean
    descripcion?: boolean
    textoInstruccion?: boolean
    tipoIndicacion?: boolean
    area?: boolean
    estado?: boolean
    idIndicacionInferior?: boolean
    fechaAlta?: boolean
    fechaBaja?: boolean
    fechaUltimaModificacion?: boolean
  }

  export type IndicacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupos?: boolean | Indicacion$gruposArgs<ExtArgs>
    indicacionSuperior?: boolean | Indicacion$indicacionSuperiorArgs<ExtArgs>
    indicacionesInferiores?: boolean | Indicacion$indicacionesInferioresArgs<ExtArgs>
    _count?: boolean | IndicacionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IndicacionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    indicacionSuperior?: boolean | Indicacion$indicacionSuperiorArgs<ExtArgs>
  }

  export type $IndicacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Indicacion"
    objects: {
      grupos: Prisma.$GrupoIndicacionPayload<ExtArgs>[]
      indicacionSuperior: Prisma.$IndicacionPayload<ExtArgs> | null
      indicacionesInferiores: Prisma.$IndicacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descripcion: string
      textoInstruccion: string
      tipoIndicacion: string | null
      area: string | null
      estado: string
      idIndicacionInferior: number | null
      fechaAlta: Date
      fechaBaja: Date | null
      fechaUltimaModificacion: Date
    }, ExtArgs["result"]["indicacion"]>
    composites: {}
  }

  type IndicacionGetPayload<S extends boolean | null | undefined | IndicacionDefaultArgs> = $Result.GetResult<Prisma.$IndicacionPayload, S>

  type IndicacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IndicacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IndicacionCountAggregateInputType | true
    }

  export interface IndicacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Indicacion'], meta: { name: 'Indicacion' } }
    /**
     * Find zero or one Indicacion that matches the filter.
     * @param {IndicacionFindUniqueArgs} args - Arguments to find a Indicacion
     * @example
     * // Get one Indicacion
     * const indicacion = await prisma.indicacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IndicacionFindUniqueArgs>(args: SelectSubset<T, IndicacionFindUniqueArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Indicacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IndicacionFindUniqueOrThrowArgs} args - Arguments to find a Indicacion
     * @example
     * // Get one Indicacion
     * const indicacion = await prisma.indicacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IndicacionFindUniqueOrThrowArgs>(args: SelectSubset<T, IndicacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Indicacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionFindFirstArgs} args - Arguments to find a Indicacion
     * @example
     * // Get one Indicacion
     * const indicacion = await prisma.indicacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IndicacionFindFirstArgs>(args?: SelectSubset<T, IndicacionFindFirstArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Indicacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionFindFirstOrThrowArgs} args - Arguments to find a Indicacion
     * @example
     * // Get one Indicacion
     * const indicacion = await prisma.indicacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IndicacionFindFirstOrThrowArgs>(args?: SelectSubset<T, IndicacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Indicacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Indicacions
     * const indicacions = await prisma.indicacion.findMany()
     * 
     * // Get first 10 Indicacions
     * const indicacions = await prisma.indicacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const indicacionWithIdOnly = await prisma.indicacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IndicacionFindManyArgs>(args?: SelectSubset<T, IndicacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Indicacion.
     * @param {IndicacionCreateArgs} args - Arguments to create a Indicacion.
     * @example
     * // Create one Indicacion
     * const Indicacion = await prisma.indicacion.create({
     *   data: {
     *     // ... data to create a Indicacion
     *   }
     * })
     * 
     */
    create<T extends IndicacionCreateArgs>(args: SelectSubset<T, IndicacionCreateArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Indicacions.
     * @param {IndicacionCreateManyArgs} args - Arguments to create many Indicacions.
     * @example
     * // Create many Indicacions
     * const indicacion = await prisma.indicacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IndicacionCreateManyArgs>(args?: SelectSubset<T, IndicacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Indicacions and returns the data saved in the database.
     * @param {IndicacionCreateManyAndReturnArgs} args - Arguments to create many Indicacions.
     * @example
     * // Create many Indicacions
     * const indicacion = await prisma.indicacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Indicacions and only return the `id`
     * const indicacionWithIdOnly = await prisma.indicacion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IndicacionCreateManyAndReturnArgs>(args?: SelectSubset<T, IndicacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Indicacion.
     * @param {IndicacionDeleteArgs} args - Arguments to delete one Indicacion.
     * @example
     * // Delete one Indicacion
     * const Indicacion = await prisma.indicacion.delete({
     *   where: {
     *     // ... filter to delete one Indicacion
     *   }
     * })
     * 
     */
    delete<T extends IndicacionDeleteArgs>(args: SelectSubset<T, IndicacionDeleteArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Indicacion.
     * @param {IndicacionUpdateArgs} args - Arguments to update one Indicacion.
     * @example
     * // Update one Indicacion
     * const indicacion = await prisma.indicacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IndicacionUpdateArgs>(args: SelectSubset<T, IndicacionUpdateArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Indicacions.
     * @param {IndicacionDeleteManyArgs} args - Arguments to filter Indicacions to delete.
     * @example
     * // Delete a few Indicacions
     * const { count } = await prisma.indicacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IndicacionDeleteManyArgs>(args?: SelectSubset<T, IndicacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Indicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Indicacions
     * const indicacion = await prisma.indicacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IndicacionUpdateManyArgs>(args: SelectSubset<T, IndicacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Indicacion.
     * @param {IndicacionUpsertArgs} args - Arguments to update or create a Indicacion.
     * @example
     * // Update or create a Indicacion
     * const indicacion = await prisma.indicacion.upsert({
     *   create: {
     *     // ... data to create a Indicacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Indicacion we want to update
     *   }
     * })
     */
    upsert<T extends IndicacionUpsertArgs>(args: SelectSubset<T, IndicacionUpsertArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Indicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionCountArgs} args - Arguments to filter Indicacions to count.
     * @example
     * // Count the number of Indicacions
     * const count = await prisma.indicacion.count({
     *   where: {
     *     // ... the filter for the Indicacions we want to count
     *   }
     * })
    **/
    count<T extends IndicacionCountArgs>(
      args?: Subset<T, IndicacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndicacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Indicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndicacionAggregateArgs>(args: Subset<T, IndicacionAggregateArgs>): Prisma.PrismaPromise<GetIndicacionAggregateType<T>>

    /**
     * Group by Indicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndicacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndicacionGroupByArgs['orderBy'] }
        : { orderBy?: IndicacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndicacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndicacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Indicacion model
   */
  readonly fields: IndicacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Indicacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IndicacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupos<T extends Indicacion$gruposArgs<ExtArgs> = {}>(args?: Subset<T, Indicacion$gruposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findMany"> | Null>
    indicacionSuperior<T extends Indicacion$indicacionSuperiorArgs<ExtArgs> = {}>(args?: Subset<T, Indicacion$indicacionSuperiorArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    indicacionesInferiores<T extends Indicacion$indicacionesInferioresArgs<ExtArgs> = {}>(args?: Subset<T, Indicacion$indicacionesInferioresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Indicacion model
   */ 
  interface IndicacionFieldRefs {
    readonly id: FieldRef<"Indicacion", 'Int'>
    readonly descripcion: FieldRef<"Indicacion", 'String'>
    readonly textoInstruccion: FieldRef<"Indicacion", 'String'>
    readonly tipoIndicacion: FieldRef<"Indicacion", 'String'>
    readonly area: FieldRef<"Indicacion", 'String'>
    readonly estado: FieldRef<"Indicacion", 'String'>
    readonly idIndicacionInferior: FieldRef<"Indicacion", 'Int'>
    readonly fechaAlta: FieldRef<"Indicacion", 'DateTime'>
    readonly fechaBaja: FieldRef<"Indicacion", 'DateTime'>
    readonly fechaUltimaModificacion: FieldRef<"Indicacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Indicacion findUnique
   */
  export type IndicacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter, which Indicacion to fetch.
     */
    where: IndicacionWhereUniqueInput
  }

  /**
   * Indicacion findUniqueOrThrow
   */
  export type IndicacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter, which Indicacion to fetch.
     */
    where: IndicacionWhereUniqueInput
  }

  /**
   * Indicacion findFirst
   */
  export type IndicacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter, which Indicacion to fetch.
     */
    where?: IndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicacions to fetch.
     */
    orderBy?: IndicacionOrderByWithRelationInput | IndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Indicacions.
     */
    cursor?: IndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Indicacions.
     */
    distinct?: IndicacionScalarFieldEnum | IndicacionScalarFieldEnum[]
  }

  /**
   * Indicacion findFirstOrThrow
   */
  export type IndicacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter, which Indicacion to fetch.
     */
    where?: IndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicacions to fetch.
     */
    orderBy?: IndicacionOrderByWithRelationInput | IndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Indicacions.
     */
    cursor?: IndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Indicacions.
     */
    distinct?: IndicacionScalarFieldEnum | IndicacionScalarFieldEnum[]
  }

  /**
   * Indicacion findMany
   */
  export type IndicacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter, which Indicacions to fetch.
     */
    where?: IndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicacions to fetch.
     */
    orderBy?: IndicacionOrderByWithRelationInput | IndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Indicacions.
     */
    cursor?: IndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicacions.
     */
    skip?: number
    distinct?: IndicacionScalarFieldEnum | IndicacionScalarFieldEnum[]
  }

  /**
   * Indicacion create
   */
  export type IndicacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Indicacion.
     */
    data: XOR<IndicacionCreateInput, IndicacionUncheckedCreateInput>
  }

  /**
   * Indicacion createMany
   */
  export type IndicacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Indicacions.
     */
    data: IndicacionCreateManyInput | IndicacionCreateManyInput[]
  }

  /**
   * Indicacion createManyAndReturn
   */
  export type IndicacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Indicacions.
     */
    data: IndicacionCreateManyInput | IndicacionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Indicacion update
   */
  export type IndicacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Indicacion.
     */
    data: XOR<IndicacionUpdateInput, IndicacionUncheckedUpdateInput>
    /**
     * Choose, which Indicacion to update.
     */
    where: IndicacionWhereUniqueInput
  }

  /**
   * Indicacion updateMany
   */
  export type IndicacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Indicacions.
     */
    data: XOR<IndicacionUpdateManyMutationInput, IndicacionUncheckedUpdateManyInput>
    /**
     * Filter which Indicacions to update
     */
    where?: IndicacionWhereInput
  }

  /**
   * Indicacion upsert
   */
  export type IndicacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Indicacion to update in case it exists.
     */
    where: IndicacionWhereUniqueInput
    /**
     * In case the Indicacion found by the `where` argument doesn't exist, create a new Indicacion with this data.
     */
    create: XOR<IndicacionCreateInput, IndicacionUncheckedCreateInput>
    /**
     * In case the Indicacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndicacionUpdateInput, IndicacionUncheckedUpdateInput>
  }

  /**
   * Indicacion delete
   */
  export type IndicacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    /**
     * Filter which Indicacion to delete.
     */
    where: IndicacionWhereUniqueInput
  }

  /**
   * Indicacion deleteMany
   */
  export type IndicacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Indicacions to delete
     */
    where?: IndicacionWhereInput
  }

  /**
   * Indicacion.grupos
   */
  export type Indicacion$gruposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    where?: GrupoIndicacionWhereInput
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    cursor?: GrupoIndicacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrupoIndicacionScalarFieldEnum | GrupoIndicacionScalarFieldEnum[]
  }

  /**
   * Indicacion.indicacionSuperior
   */
  export type Indicacion$indicacionSuperiorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    where?: IndicacionWhereInput
  }

  /**
   * Indicacion.indicacionesInferiores
   */
  export type Indicacion$indicacionesInferioresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
    where?: IndicacionWhereInput
    orderBy?: IndicacionOrderByWithRelationInput | IndicacionOrderByWithRelationInput[]
    cursor?: IndicacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IndicacionScalarFieldEnum | IndicacionScalarFieldEnum[]
  }

  /**
   * Indicacion without action
   */
  export type IndicacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicacion
     */
    select?: IndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicacionInclude<ExtArgs> | null
  }


  /**
   * Model PracticaGrupo
   */

  export type AggregatePracticaGrupo = {
    _count: PracticaGrupoCountAggregateOutputType | null
    _avg: PracticaGrupoAvgAggregateOutputType | null
    _sum: PracticaGrupoSumAggregateOutputType | null
    _min: PracticaGrupoMinAggregateOutputType | null
    _max: PracticaGrupoMaxAggregateOutputType | null
  }

  export type PracticaGrupoAvgAggregateOutputType = {
    idPractica: number | null
    idGrupo: number | null
  }

  export type PracticaGrupoSumAggregateOutputType = {
    idPractica: number | null
    idGrupo: number | null
  }

  export type PracticaGrupoMinAggregateOutputType = {
    idPractica: number | null
    idGrupo: number | null
    activo: boolean | null
    fechaVinculacion: Date | null
  }

  export type PracticaGrupoMaxAggregateOutputType = {
    idPractica: number | null
    idGrupo: number | null
    activo: boolean | null
    fechaVinculacion: Date | null
  }

  export type PracticaGrupoCountAggregateOutputType = {
    idPractica: number
    idGrupo: number
    activo: number
    fechaVinculacion: number
    _all: number
  }


  export type PracticaGrupoAvgAggregateInputType = {
    idPractica?: true
    idGrupo?: true
  }

  export type PracticaGrupoSumAggregateInputType = {
    idPractica?: true
    idGrupo?: true
  }

  export type PracticaGrupoMinAggregateInputType = {
    idPractica?: true
    idGrupo?: true
    activo?: true
    fechaVinculacion?: true
  }

  export type PracticaGrupoMaxAggregateInputType = {
    idPractica?: true
    idGrupo?: true
    activo?: true
    fechaVinculacion?: true
  }

  export type PracticaGrupoCountAggregateInputType = {
    idPractica?: true
    idGrupo?: true
    activo?: true
    fechaVinculacion?: true
    _all?: true
  }

  export type PracticaGrupoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticaGrupo to aggregate.
     */
    where?: PracticaGrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticaGrupos to fetch.
     */
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticaGrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticaGrupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticaGrupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticaGrupos
    **/
    _count?: true | PracticaGrupoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticaGrupoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticaGrupoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticaGrupoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticaGrupoMaxAggregateInputType
  }

  export type GetPracticaGrupoAggregateType<T extends PracticaGrupoAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticaGrupo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticaGrupo[P]>
      : GetScalarType<T[P], AggregatePracticaGrupo[P]>
  }




  export type PracticaGrupoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticaGrupoWhereInput
    orderBy?: PracticaGrupoOrderByWithAggregationInput | PracticaGrupoOrderByWithAggregationInput[]
    by: PracticaGrupoScalarFieldEnum[] | PracticaGrupoScalarFieldEnum
    having?: PracticaGrupoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticaGrupoCountAggregateInputType | true
    _avg?: PracticaGrupoAvgAggregateInputType
    _sum?: PracticaGrupoSumAggregateInputType
    _min?: PracticaGrupoMinAggregateInputType
    _max?: PracticaGrupoMaxAggregateInputType
  }

  export type PracticaGrupoGroupByOutputType = {
    idPractica: number
    idGrupo: number
    activo: boolean
    fechaVinculacion: Date
    _count: PracticaGrupoCountAggregateOutputType | null
    _avg: PracticaGrupoAvgAggregateOutputType | null
    _sum: PracticaGrupoSumAggregateOutputType | null
    _min: PracticaGrupoMinAggregateOutputType | null
    _max: PracticaGrupoMaxAggregateOutputType | null
  }

  type GetPracticaGrupoGroupByPayload<T extends PracticaGrupoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticaGrupoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticaGrupoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticaGrupoGroupByOutputType[P]>
            : GetScalarType<T[P], PracticaGrupoGroupByOutputType[P]>
        }
      >
    >


  export type PracticaGrupoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPractica?: boolean
    idGrupo?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
    practica?: boolean | PracticaDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practicaGrupo"]>

  export type PracticaGrupoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPractica?: boolean
    idGrupo?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
    practica?: boolean | PracticaDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practicaGrupo"]>

  export type PracticaGrupoSelectScalar = {
    idPractica?: boolean
    idGrupo?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
  }

  export type PracticaGrupoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practica?: boolean | PracticaDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
  }
  export type PracticaGrupoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practica?: boolean | PracticaDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
  }

  export type $PracticaGrupoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticaGrupo"
    objects: {
      practica: Prisma.$PracticaPayload<ExtArgs>
      grupo: Prisma.$GrupoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idPractica: number
      idGrupo: number
      activo: boolean
      fechaVinculacion: Date
    }, ExtArgs["result"]["practicaGrupo"]>
    composites: {}
  }

  type PracticaGrupoGetPayload<S extends boolean | null | undefined | PracticaGrupoDefaultArgs> = $Result.GetResult<Prisma.$PracticaGrupoPayload, S>

  type PracticaGrupoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PracticaGrupoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PracticaGrupoCountAggregateInputType | true
    }

  export interface PracticaGrupoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticaGrupo'], meta: { name: 'PracticaGrupo' } }
    /**
     * Find zero or one PracticaGrupo that matches the filter.
     * @param {PracticaGrupoFindUniqueArgs} args - Arguments to find a PracticaGrupo
     * @example
     * // Get one PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticaGrupoFindUniqueArgs>(args: SelectSubset<T, PracticaGrupoFindUniqueArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PracticaGrupo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PracticaGrupoFindUniqueOrThrowArgs} args - Arguments to find a PracticaGrupo
     * @example
     * // Get one PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticaGrupoFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticaGrupoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PracticaGrupo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoFindFirstArgs} args - Arguments to find a PracticaGrupo
     * @example
     * // Get one PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticaGrupoFindFirstArgs>(args?: SelectSubset<T, PracticaGrupoFindFirstArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PracticaGrupo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoFindFirstOrThrowArgs} args - Arguments to find a PracticaGrupo
     * @example
     * // Get one PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticaGrupoFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticaGrupoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PracticaGrupos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticaGrupos
     * const practicaGrupos = await prisma.practicaGrupo.findMany()
     * 
     * // Get first 10 PracticaGrupos
     * const practicaGrupos = await prisma.practicaGrupo.findMany({ take: 10 })
     * 
     * // Only select the `idPractica`
     * const practicaGrupoWithIdPracticaOnly = await prisma.practicaGrupo.findMany({ select: { idPractica: true } })
     * 
     */
    findMany<T extends PracticaGrupoFindManyArgs>(args?: SelectSubset<T, PracticaGrupoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PracticaGrupo.
     * @param {PracticaGrupoCreateArgs} args - Arguments to create a PracticaGrupo.
     * @example
     * // Create one PracticaGrupo
     * const PracticaGrupo = await prisma.practicaGrupo.create({
     *   data: {
     *     // ... data to create a PracticaGrupo
     *   }
     * })
     * 
     */
    create<T extends PracticaGrupoCreateArgs>(args: SelectSubset<T, PracticaGrupoCreateArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PracticaGrupos.
     * @param {PracticaGrupoCreateManyArgs} args - Arguments to create many PracticaGrupos.
     * @example
     * // Create many PracticaGrupos
     * const practicaGrupo = await prisma.practicaGrupo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticaGrupoCreateManyArgs>(args?: SelectSubset<T, PracticaGrupoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticaGrupos and returns the data saved in the database.
     * @param {PracticaGrupoCreateManyAndReturnArgs} args - Arguments to create many PracticaGrupos.
     * @example
     * // Create many PracticaGrupos
     * const practicaGrupo = await prisma.practicaGrupo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticaGrupos and only return the `idPractica`
     * const practicaGrupoWithIdPracticaOnly = await prisma.practicaGrupo.createManyAndReturn({ 
     *   select: { idPractica: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticaGrupoCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticaGrupoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PracticaGrupo.
     * @param {PracticaGrupoDeleteArgs} args - Arguments to delete one PracticaGrupo.
     * @example
     * // Delete one PracticaGrupo
     * const PracticaGrupo = await prisma.practicaGrupo.delete({
     *   where: {
     *     // ... filter to delete one PracticaGrupo
     *   }
     * })
     * 
     */
    delete<T extends PracticaGrupoDeleteArgs>(args: SelectSubset<T, PracticaGrupoDeleteArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PracticaGrupo.
     * @param {PracticaGrupoUpdateArgs} args - Arguments to update one PracticaGrupo.
     * @example
     * // Update one PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticaGrupoUpdateArgs>(args: SelectSubset<T, PracticaGrupoUpdateArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PracticaGrupos.
     * @param {PracticaGrupoDeleteManyArgs} args - Arguments to filter PracticaGrupos to delete.
     * @example
     * // Delete a few PracticaGrupos
     * const { count } = await prisma.practicaGrupo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticaGrupoDeleteManyArgs>(args?: SelectSubset<T, PracticaGrupoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticaGrupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticaGrupos
     * const practicaGrupo = await prisma.practicaGrupo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticaGrupoUpdateManyArgs>(args: SelectSubset<T, PracticaGrupoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PracticaGrupo.
     * @param {PracticaGrupoUpsertArgs} args - Arguments to update or create a PracticaGrupo.
     * @example
     * // Update or create a PracticaGrupo
     * const practicaGrupo = await prisma.practicaGrupo.upsert({
     *   create: {
     *     // ... data to create a PracticaGrupo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticaGrupo we want to update
     *   }
     * })
     */
    upsert<T extends PracticaGrupoUpsertArgs>(args: SelectSubset<T, PracticaGrupoUpsertArgs<ExtArgs>>): Prisma__PracticaGrupoClient<$Result.GetResult<Prisma.$PracticaGrupoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PracticaGrupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoCountArgs} args - Arguments to filter PracticaGrupos to count.
     * @example
     * // Count the number of PracticaGrupos
     * const count = await prisma.practicaGrupo.count({
     *   where: {
     *     // ... the filter for the PracticaGrupos we want to count
     *   }
     * })
    **/
    count<T extends PracticaGrupoCountArgs>(
      args?: Subset<T, PracticaGrupoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticaGrupoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticaGrupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticaGrupoAggregateArgs>(args: Subset<T, PracticaGrupoAggregateArgs>): Prisma.PrismaPromise<GetPracticaGrupoAggregateType<T>>

    /**
     * Group by PracticaGrupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticaGrupoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticaGrupoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticaGrupoGroupByArgs['orderBy'] }
        : { orderBy?: PracticaGrupoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticaGrupoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticaGrupoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticaGrupo model
   */
  readonly fields: PracticaGrupoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticaGrupo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticaGrupoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practica<T extends PracticaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticaDefaultArgs<ExtArgs>>): Prisma__PracticaClient<$Result.GetResult<Prisma.$PracticaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grupo<T extends GrupoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoDefaultArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticaGrupo model
   */ 
  interface PracticaGrupoFieldRefs {
    readonly idPractica: FieldRef<"PracticaGrupo", 'Int'>
    readonly idGrupo: FieldRef<"PracticaGrupo", 'Int'>
    readonly activo: FieldRef<"PracticaGrupo", 'Boolean'>
    readonly fechaVinculacion: FieldRef<"PracticaGrupo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PracticaGrupo findUnique
   */
  export type PracticaGrupoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter, which PracticaGrupo to fetch.
     */
    where: PracticaGrupoWhereUniqueInput
  }

  /**
   * PracticaGrupo findUniqueOrThrow
   */
  export type PracticaGrupoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter, which PracticaGrupo to fetch.
     */
    where: PracticaGrupoWhereUniqueInput
  }

  /**
   * PracticaGrupo findFirst
   */
  export type PracticaGrupoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter, which PracticaGrupo to fetch.
     */
    where?: PracticaGrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticaGrupos to fetch.
     */
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticaGrupos.
     */
    cursor?: PracticaGrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticaGrupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticaGrupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticaGrupos.
     */
    distinct?: PracticaGrupoScalarFieldEnum | PracticaGrupoScalarFieldEnum[]
  }

  /**
   * PracticaGrupo findFirstOrThrow
   */
  export type PracticaGrupoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter, which PracticaGrupo to fetch.
     */
    where?: PracticaGrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticaGrupos to fetch.
     */
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticaGrupos.
     */
    cursor?: PracticaGrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticaGrupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticaGrupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticaGrupos.
     */
    distinct?: PracticaGrupoScalarFieldEnum | PracticaGrupoScalarFieldEnum[]
  }

  /**
   * PracticaGrupo findMany
   */
  export type PracticaGrupoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter, which PracticaGrupos to fetch.
     */
    where?: PracticaGrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticaGrupos to fetch.
     */
    orderBy?: PracticaGrupoOrderByWithRelationInput | PracticaGrupoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticaGrupos.
     */
    cursor?: PracticaGrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticaGrupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticaGrupos.
     */
    skip?: number
    distinct?: PracticaGrupoScalarFieldEnum | PracticaGrupoScalarFieldEnum[]
  }

  /**
   * PracticaGrupo create
   */
  export type PracticaGrupoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticaGrupo.
     */
    data: XOR<PracticaGrupoCreateInput, PracticaGrupoUncheckedCreateInput>
  }

  /**
   * PracticaGrupo createMany
   */
  export type PracticaGrupoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticaGrupos.
     */
    data: PracticaGrupoCreateManyInput | PracticaGrupoCreateManyInput[]
  }

  /**
   * PracticaGrupo createManyAndReturn
   */
  export type PracticaGrupoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PracticaGrupos.
     */
    data: PracticaGrupoCreateManyInput | PracticaGrupoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticaGrupo update
   */
  export type PracticaGrupoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticaGrupo.
     */
    data: XOR<PracticaGrupoUpdateInput, PracticaGrupoUncheckedUpdateInput>
    /**
     * Choose, which PracticaGrupo to update.
     */
    where: PracticaGrupoWhereUniqueInput
  }

  /**
   * PracticaGrupo updateMany
   */
  export type PracticaGrupoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticaGrupos.
     */
    data: XOR<PracticaGrupoUpdateManyMutationInput, PracticaGrupoUncheckedUpdateManyInput>
    /**
     * Filter which PracticaGrupos to update
     */
    where?: PracticaGrupoWhereInput
  }

  /**
   * PracticaGrupo upsert
   */
  export type PracticaGrupoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticaGrupo to update in case it exists.
     */
    where: PracticaGrupoWhereUniqueInput
    /**
     * In case the PracticaGrupo found by the `where` argument doesn't exist, create a new PracticaGrupo with this data.
     */
    create: XOR<PracticaGrupoCreateInput, PracticaGrupoUncheckedCreateInput>
    /**
     * In case the PracticaGrupo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticaGrupoUpdateInput, PracticaGrupoUncheckedUpdateInput>
  }

  /**
   * PracticaGrupo delete
   */
  export type PracticaGrupoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
    /**
     * Filter which PracticaGrupo to delete.
     */
    where: PracticaGrupoWhereUniqueInput
  }

  /**
   * PracticaGrupo deleteMany
   */
  export type PracticaGrupoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticaGrupos to delete
     */
    where?: PracticaGrupoWhereInput
  }

  /**
   * PracticaGrupo without action
   */
  export type PracticaGrupoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticaGrupo
     */
    select?: PracticaGrupoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticaGrupoInclude<ExtArgs> | null
  }


  /**
   * Model GrupoIndicacion
   */

  export type AggregateGrupoIndicacion = {
    _count: GrupoIndicacionCountAggregateOutputType | null
    _avg: GrupoIndicacionAvgAggregateOutputType | null
    _sum: GrupoIndicacionSumAggregateOutputType | null
    _min: GrupoIndicacionMinAggregateOutputType | null
    _max: GrupoIndicacionMaxAggregateOutputType | null
  }

  export type GrupoIndicacionAvgAggregateOutputType = {
    idGrupo: number | null
    idIndicacion: number | null
    orden: number | null
  }

  export type GrupoIndicacionSumAggregateOutputType = {
    idGrupo: number | null
    idIndicacion: number | null
    orden: number | null
  }

  export type GrupoIndicacionMinAggregateOutputType = {
    idGrupo: number | null
    idIndicacion: number | null
    orden: number | null
    activo: boolean | null
    fechaVinculacion: Date | null
  }

  export type GrupoIndicacionMaxAggregateOutputType = {
    idGrupo: number | null
    idIndicacion: number | null
    orden: number | null
    activo: boolean | null
    fechaVinculacion: Date | null
  }

  export type GrupoIndicacionCountAggregateOutputType = {
    idGrupo: number
    idIndicacion: number
    orden: number
    activo: number
    fechaVinculacion: number
    _all: number
  }


  export type GrupoIndicacionAvgAggregateInputType = {
    idGrupo?: true
    idIndicacion?: true
    orden?: true
  }

  export type GrupoIndicacionSumAggregateInputType = {
    idGrupo?: true
    idIndicacion?: true
    orden?: true
  }

  export type GrupoIndicacionMinAggregateInputType = {
    idGrupo?: true
    idIndicacion?: true
    orden?: true
    activo?: true
    fechaVinculacion?: true
  }

  export type GrupoIndicacionMaxAggregateInputType = {
    idGrupo?: true
    idIndicacion?: true
    orden?: true
    activo?: true
    fechaVinculacion?: true
  }

  export type GrupoIndicacionCountAggregateInputType = {
    idGrupo?: true
    idIndicacion?: true
    orden?: true
    activo?: true
    fechaVinculacion?: true
    _all?: true
  }

  export type GrupoIndicacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrupoIndicacion to aggregate.
     */
    where?: GrupoIndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoIndicacions to fetch.
     */
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrupoIndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoIndicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoIndicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrupoIndicacions
    **/
    _count?: true | GrupoIndicacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrupoIndicacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrupoIndicacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrupoIndicacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrupoIndicacionMaxAggregateInputType
  }

  export type GetGrupoIndicacionAggregateType<T extends GrupoIndicacionAggregateArgs> = {
        [P in keyof T & keyof AggregateGrupoIndicacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrupoIndicacion[P]>
      : GetScalarType<T[P], AggregateGrupoIndicacion[P]>
  }




  export type GrupoIndicacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoIndicacionWhereInput
    orderBy?: GrupoIndicacionOrderByWithAggregationInput | GrupoIndicacionOrderByWithAggregationInput[]
    by: GrupoIndicacionScalarFieldEnum[] | GrupoIndicacionScalarFieldEnum
    having?: GrupoIndicacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrupoIndicacionCountAggregateInputType | true
    _avg?: GrupoIndicacionAvgAggregateInputType
    _sum?: GrupoIndicacionSumAggregateInputType
    _min?: GrupoIndicacionMinAggregateInputType
    _max?: GrupoIndicacionMaxAggregateInputType
  }

  export type GrupoIndicacionGroupByOutputType = {
    idGrupo: number
    idIndicacion: number
    orden: number
    activo: boolean
    fechaVinculacion: Date
    _count: GrupoIndicacionCountAggregateOutputType | null
    _avg: GrupoIndicacionAvgAggregateOutputType | null
    _sum: GrupoIndicacionSumAggregateOutputType | null
    _min: GrupoIndicacionMinAggregateOutputType | null
    _max: GrupoIndicacionMaxAggregateOutputType | null
  }

  type GetGrupoIndicacionGroupByPayload<T extends GrupoIndicacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrupoIndicacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrupoIndicacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrupoIndicacionGroupByOutputType[P]>
            : GetScalarType<T[P], GrupoIndicacionGroupByOutputType[P]>
        }
      >
    >


  export type GrupoIndicacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idGrupo?: boolean
    idIndicacion?: boolean
    orden?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
    indicacion?: boolean | IndicacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupoIndicacion"]>

  export type GrupoIndicacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idGrupo?: boolean
    idIndicacion?: boolean
    orden?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
    indicacion?: boolean | IndicacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupoIndicacion"]>

  export type GrupoIndicacionSelectScalar = {
    idGrupo?: boolean
    idIndicacion?: boolean
    orden?: boolean
    activo?: boolean
    fechaVinculacion?: boolean
  }

  export type GrupoIndicacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
    indicacion?: boolean | IndicacionDefaultArgs<ExtArgs>
  }
  export type GrupoIndicacionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GrupoDefaultArgs<ExtArgs>
    indicacion?: boolean | IndicacionDefaultArgs<ExtArgs>
  }

  export type $GrupoIndicacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrupoIndicacion"
    objects: {
      grupo: Prisma.$GrupoPayload<ExtArgs>
      indicacion: Prisma.$IndicacionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idGrupo: number
      idIndicacion: number
      orden: number
      activo: boolean
      fechaVinculacion: Date
    }, ExtArgs["result"]["grupoIndicacion"]>
    composites: {}
  }

  type GrupoIndicacionGetPayload<S extends boolean | null | undefined | GrupoIndicacionDefaultArgs> = $Result.GetResult<Prisma.$GrupoIndicacionPayload, S>

  type GrupoIndicacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrupoIndicacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrupoIndicacionCountAggregateInputType | true
    }

  export interface GrupoIndicacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrupoIndicacion'], meta: { name: 'GrupoIndicacion' } }
    /**
     * Find zero or one GrupoIndicacion that matches the filter.
     * @param {GrupoIndicacionFindUniqueArgs} args - Arguments to find a GrupoIndicacion
     * @example
     * // Get one GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrupoIndicacionFindUniqueArgs>(args: SelectSubset<T, GrupoIndicacionFindUniqueArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrupoIndicacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrupoIndicacionFindUniqueOrThrowArgs} args - Arguments to find a GrupoIndicacion
     * @example
     * // Get one GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrupoIndicacionFindUniqueOrThrowArgs>(args: SelectSubset<T, GrupoIndicacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrupoIndicacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionFindFirstArgs} args - Arguments to find a GrupoIndicacion
     * @example
     * // Get one GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrupoIndicacionFindFirstArgs>(args?: SelectSubset<T, GrupoIndicacionFindFirstArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrupoIndicacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionFindFirstOrThrowArgs} args - Arguments to find a GrupoIndicacion
     * @example
     * // Get one GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrupoIndicacionFindFirstOrThrowArgs>(args?: SelectSubset<T, GrupoIndicacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrupoIndicacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrupoIndicacions
     * const grupoIndicacions = await prisma.grupoIndicacion.findMany()
     * 
     * // Get first 10 GrupoIndicacions
     * const grupoIndicacions = await prisma.grupoIndicacion.findMany({ take: 10 })
     * 
     * // Only select the `idGrupo`
     * const grupoIndicacionWithIdGrupoOnly = await prisma.grupoIndicacion.findMany({ select: { idGrupo: true } })
     * 
     */
    findMany<T extends GrupoIndicacionFindManyArgs>(args?: SelectSubset<T, GrupoIndicacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrupoIndicacion.
     * @param {GrupoIndicacionCreateArgs} args - Arguments to create a GrupoIndicacion.
     * @example
     * // Create one GrupoIndicacion
     * const GrupoIndicacion = await prisma.grupoIndicacion.create({
     *   data: {
     *     // ... data to create a GrupoIndicacion
     *   }
     * })
     * 
     */
    create<T extends GrupoIndicacionCreateArgs>(args: SelectSubset<T, GrupoIndicacionCreateArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrupoIndicacions.
     * @param {GrupoIndicacionCreateManyArgs} args - Arguments to create many GrupoIndicacions.
     * @example
     * // Create many GrupoIndicacions
     * const grupoIndicacion = await prisma.grupoIndicacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrupoIndicacionCreateManyArgs>(args?: SelectSubset<T, GrupoIndicacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GrupoIndicacions and returns the data saved in the database.
     * @param {GrupoIndicacionCreateManyAndReturnArgs} args - Arguments to create many GrupoIndicacions.
     * @example
     * // Create many GrupoIndicacions
     * const grupoIndicacion = await prisma.grupoIndicacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GrupoIndicacions and only return the `idGrupo`
     * const grupoIndicacionWithIdGrupoOnly = await prisma.grupoIndicacion.createManyAndReturn({ 
     *   select: { idGrupo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GrupoIndicacionCreateManyAndReturnArgs>(args?: SelectSubset<T, GrupoIndicacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GrupoIndicacion.
     * @param {GrupoIndicacionDeleteArgs} args - Arguments to delete one GrupoIndicacion.
     * @example
     * // Delete one GrupoIndicacion
     * const GrupoIndicacion = await prisma.grupoIndicacion.delete({
     *   where: {
     *     // ... filter to delete one GrupoIndicacion
     *   }
     * })
     * 
     */
    delete<T extends GrupoIndicacionDeleteArgs>(args: SelectSubset<T, GrupoIndicacionDeleteArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrupoIndicacion.
     * @param {GrupoIndicacionUpdateArgs} args - Arguments to update one GrupoIndicacion.
     * @example
     * // Update one GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrupoIndicacionUpdateArgs>(args: SelectSubset<T, GrupoIndicacionUpdateArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrupoIndicacions.
     * @param {GrupoIndicacionDeleteManyArgs} args - Arguments to filter GrupoIndicacions to delete.
     * @example
     * // Delete a few GrupoIndicacions
     * const { count } = await prisma.grupoIndicacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrupoIndicacionDeleteManyArgs>(args?: SelectSubset<T, GrupoIndicacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrupoIndicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrupoIndicacions
     * const grupoIndicacion = await prisma.grupoIndicacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrupoIndicacionUpdateManyArgs>(args: SelectSubset<T, GrupoIndicacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrupoIndicacion.
     * @param {GrupoIndicacionUpsertArgs} args - Arguments to update or create a GrupoIndicacion.
     * @example
     * // Update or create a GrupoIndicacion
     * const grupoIndicacion = await prisma.grupoIndicacion.upsert({
     *   create: {
     *     // ... data to create a GrupoIndicacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrupoIndicacion we want to update
     *   }
     * })
     */
    upsert<T extends GrupoIndicacionUpsertArgs>(args: SelectSubset<T, GrupoIndicacionUpsertArgs<ExtArgs>>): Prisma__GrupoIndicacionClient<$Result.GetResult<Prisma.$GrupoIndicacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrupoIndicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionCountArgs} args - Arguments to filter GrupoIndicacions to count.
     * @example
     * // Count the number of GrupoIndicacions
     * const count = await prisma.grupoIndicacion.count({
     *   where: {
     *     // ... the filter for the GrupoIndicacions we want to count
     *   }
     * })
    **/
    count<T extends GrupoIndicacionCountArgs>(
      args?: Subset<T, GrupoIndicacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrupoIndicacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrupoIndicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrupoIndicacionAggregateArgs>(args: Subset<T, GrupoIndicacionAggregateArgs>): Prisma.PrismaPromise<GetGrupoIndicacionAggregateType<T>>

    /**
     * Group by GrupoIndicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoIndicacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrupoIndicacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrupoIndicacionGroupByArgs['orderBy'] }
        : { orderBy?: GrupoIndicacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrupoIndicacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrupoIndicacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrupoIndicacion model
   */
  readonly fields: GrupoIndicacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrupoIndicacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrupoIndicacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GrupoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoDefaultArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    indicacion<T extends IndicacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicacionDefaultArgs<ExtArgs>>): Prisma__IndicacionClient<$Result.GetResult<Prisma.$IndicacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrupoIndicacion model
   */ 
  interface GrupoIndicacionFieldRefs {
    readonly idGrupo: FieldRef<"GrupoIndicacion", 'Int'>
    readonly idIndicacion: FieldRef<"GrupoIndicacion", 'Int'>
    readonly orden: FieldRef<"GrupoIndicacion", 'Int'>
    readonly activo: FieldRef<"GrupoIndicacion", 'Boolean'>
    readonly fechaVinculacion: FieldRef<"GrupoIndicacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrupoIndicacion findUnique
   */
  export type GrupoIndicacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter, which GrupoIndicacion to fetch.
     */
    where: GrupoIndicacionWhereUniqueInput
  }

  /**
   * GrupoIndicacion findUniqueOrThrow
   */
  export type GrupoIndicacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter, which GrupoIndicacion to fetch.
     */
    where: GrupoIndicacionWhereUniqueInput
  }

  /**
   * GrupoIndicacion findFirst
   */
  export type GrupoIndicacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter, which GrupoIndicacion to fetch.
     */
    where?: GrupoIndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoIndicacions to fetch.
     */
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrupoIndicacions.
     */
    cursor?: GrupoIndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoIndicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoIndicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrupoIndicacions.
     */
    distinct?: GrupoIndicacionScalarFieldEnum | GrupoIndicacionScalarFieldEnum[]
  }

  /**
   * GrupoIndicacion findFirstOrThrow
   */
  export type GrupoIndicacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter, which GrupoIndicacion to fetch.
     */
    where?: GrupoIndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoIndicacions to fetch.
     */
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrupoIndicacions.
     */
    cursor?: GrupoIndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoIndicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoIndicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrupoIndicacions.
     */
    distinct?: GrupoIndicacionScalarFieldEnum | GrupoIndicacionScalarFieldEnum[]
  }

  /**
   * GrupoIndicacion findMany
   */
  export type GrupoIndicacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter, which GrupoIndicacions to fetch.
     */
    where?: GrupoIndicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoIndicacions to fetch.
     */
    orderBy?: GrupoIndicacionOrderByWithRelationInput | GrupoIndicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrupoIndicacions.
     */
    cursor?: GrupoIndicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoIndicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoIndicacions.
     */
    skip?: number
    distinct?: GrupoIndicacionScalarFieldEnum | GrupoIndicacionScalarFieldEnum[]
  }

  /**
   * GrupoIndicacion create
   */
  export type GrupoIndicacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * The data needed to create a GrupoIndicacion.
     */
    data: XOR<GrupoIndicacionCreateInput, GrupoIndicacionUncheckedCreateInput>
  }

  /**
   * GrupoIndicacion createMany
   */
  export type GrupoIndicacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrupoIndicacions.
     */
    data: GrupoIndicacionCreateManyInput | GrupoIndicacionCreateManyInput[]
  }

  /**
   * GrupoIndicacion createManyAndReturn
   */
  export type GrupoIndicacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GrupoIndicacions.
     */
    data: GrupoIndicacionCreateManyInput | GrupoIndicacionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GrupoIndicacion update
   */
  export type GrupoIndicacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * The data needed to update a GrupoIndicacion.
     */
    data: XOR<GrupoIndicacionUpdateInput, GrupoIndicacionUncheckedUpdateInput>
    /**
     * Choose, which GrupoIndicacion to update.
     */
    where: GrupoIndicacionWhereUniqueInput
  }

  /**
   * GrupoIndicacion updateMany
   */
  export type GrupoIndicacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrupoIndicacions.
     */
    data: XOR<GrupoIndicacionUpdateManyMutationInput, GrupoIndicacionUncheckedUpdateManyInput>
    /**
     * Filter which GrupoIndicacions to update
     */
    where?: GrupoIndicacionWhereInput
  }

  /**
   * GrupoIndicacion upsert
   */
  export type GrupoIndicacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * The filter to search for the GrupoIndicacion to update in case it exists.
     */
    where: GrupoIndicacionWhereUniqueInput
    /**
     * In case the GrupoIndicacion found by the `where` argument doesn't exist, create a new GrupoIndicacion with this data.
     */
    create: XOR<GrupoIndicacionCreateInput, GrupoIndicacionUncheckedCreateInput>
    /**
     * In case the GrupoIndicacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrupoIndicacionUpdateInput, GrupoIndicacionUncheckedUpdateInput>
  }

  /**
   * GrupoIndicacion delete
   */
  export type GrupoIndicacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
    /**
     * Filter which GrupoIndicacion to delete.
     */
    where: GrupoIndicacionWhereUniqueInput
  }

  /**
   * GrupoIndicacion deleteMany
   */
  export type GrupoIndicacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrupoIndicacions to delete
     */
    where?: GrupoIndicacionWhereInput
  }

  /**
   * GrupoIndicacion without action
   */
  export type GrupoIndicacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoIndicacion
     */
    select?: GrupoIndicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoIndicacionInclude<ExtArgs> | null
  }


  /**
   * Model GruposAlternativos
   */

  export type AggregateGruposAlternativos = {
    _count: GruposAlternativosCountAggregateOutputType | null
    _avg: GruposAlternativosAvgAggregateOutputType | null
    _sum: GruposAlternativosSumAggregateOutputType | null
    _min: GruposAlternativosMinAggregateOutputType | null
    _max: GruposAlternativosMaxAggregateOutputType | null
  }

  export type GruposAlternativosAvgAggregateOutputType = {
    id: number | null
    idGrupoCondicion1: number | null
    idGrupoCondicion2: number | null
    idGrupoResultante: number | null
  }

  export type GruposAlternativosSumAggregateOutputType = {
    id: number | null
    idGrupoCondicion1: number | null
    idGrupoCondicion2: number | null
    idGrupoResultante: number | null
  }

  export type GruposAlternativosMinAggregateOutputType = {
    id: number | null
    idGrupoCondicion1: number | null
    idGrupoCondicion2: number | null
    idGrupoResultante: number | null
    descripcionCaso: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type GruposAlternativosMaxAggregateOutputType = {
    id: number | null
    idGrupoCondicion1: number | null
    idGrupoCondicion2: number | null
    idGrupoResultante: number | null
    descripcionCaso: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type GruposAlternativosCountAggregateOutputType = {
    id: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso: number
    activo: number
    fechaCreacion: number
    _all: number
  }


  export type GruposAlternativosAvgAggregateInputType = {
    id?: true
    idGrupoCondicion1?: true
    idGrupoCondicion2?: true
    idGrupoResultante?: true
  }

  export type GruposAlternativosSumAggregateInputType = {
    id?: true
    idGrupoCondicion1?: true
    idGrupoCondicion2?: true
    idGrupoResultante?: true
  }

  export type GruposAlternativosMinAggregateInputType = {
    id?: true
    idGrupoCondicion1?: true
    idGrupoCondicion2?: true
    idGrupoResultante?: true
    descripcionCaso?: true
    activo?: true
    fechaCreacion?: true
  }

  export type GruposAlternativosMaxAggregateInputType = {
    id?: true
    idGrupoCondicion1?: true
    idGrupoCondicion2?: true
    idGrupoResultante?: true
    descripcionCaso?: true
    activo?: true
    fechaCreacion?: true
  }

  export type GruposAlternativosCountAggregateInputType = {
    id?: true
    idGrupoCondicion1?: true
    idGrupoCondicion2?: true
    idGrupoResultante?: true
    descripcionCaso?: true
    activo?: true
    fechaCreacion?: true
    _all?: true
  }

  export type GruposAlternativosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GruposAlternativos to aggregate.
     */
    where?: GruposAlternativosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GruposAlternativos to fetch.
     */
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GruposAlternativosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GruposAlternativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GruposAlternativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GruposAlternativos
    **/
    _count?: true | GruposAlternativosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GruposAlternativosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GruposAlternativosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GruposAlternativosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GruposAlternativosMaxAggregateInputType
  }

  export type GetGruposAlternativosAggregateType<T extends GruposAlternativosAggregateArgs> = {
        [P in keyof T & keyof AggregateGruposAlternativos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGruposAlternativos[P]>
      : GetScalarType<T[P], AggregateGruposAlternativos[P]>
  }




  export type GruposAlternativosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GruposAlternativosWhereInput
    orderBy?: GruposAlternativosOrderByWithAggregationInput | GruposAlternativosOrderByWithAggregationInput[]
    by: GruposAlternativosScalarFieldEnum[] | GruposAlternativosScalarFieldEnum
    having?: GruposAlternativosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GruposAlternativosCountAggregateInputType | true
    _avg?: GruposAlternativosAvgAggregateInputType
    _sum?: GruposAlternativosSumAggregateInputType
    _min?: GruposAlternativosMinAggregateInputType
    _max?: GruposAlternativosMaxAggregateInputType
  }

  export type GruposAlternativosGroupByOutputType = {
    id: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso: string | null
    activo: boolean
    fechaCreacion: Date
    _count: GruposAlternativosCountAggregateOutputType | null
    _avg: GruposAlternativosAvgAggregateOutputType | null
    _sum: GruposAlternativosSumAggregateOutputType | null
    _min: GruposAlternativosMinAggregateOutputType | null
    _max: GruposAlternativosMaxAggregateOutputType | null
  }

  type GetGruposAlternativosGroupByPayload<T extends GruposAlternativosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GruposAlternativosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GruposAlternativosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GruposAlternativosGroupByOutputType[P]>
            : GetScalarType<T[P], GruposAlternativosGroupByOutputType[P]>
        }
      >
    >


  export type GruposAlternativosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idGrupoCondicion1?: boolean
    idGrupoCondicion2?: boolean
    idGrupoResultante?: boolean
    descripcionCaso?: boolean
    activo?: boolean
    fechaCreacion?: boolean
    grupoCondicion1?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoCondicion2?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoResultante?: boolean | GrupoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gruposAlternativos"]>

  export type GruposAlternativosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idGrupoCondicion1?: boolean
    idGrupoCondicion2?: boolean
    idGrupoResultante?: boolean
    descripcionCaso?: boolean
    activo?: boolean
    fechaCreacion?: boolean
    grupoCondicion1?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoCondicion2?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoResultante?: boolean | GrupoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gruposAlternativos"]>

  export type GruposAlternativosSelectScalar = {
    id?: boolean
    idGrupoCondicion1?: boolean
    idGrupoCondicion2?: boolean
    idGrupoResultante?: boolean
    descripcionCaso?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }

  export type GruposAlternativosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupoCondicion1?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoCondicion2?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoResultante?: boolean | GrupoDefaultArgs<ExtArgs>
  }
  export type GruposAlternativosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupoCondicion1?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoCondicion2?: boolean | GrupoDefaultArgs<ExtArgs>
    grupoResultante?: boolean | GrupoDefaultArgs<ExtArgs>
  }

  export type $GruposAlternativosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GruposAlternativos"
    objects: {
      grupoCondicion1: Prisma.$GrupoPayload<ExtArgs>
      grupoCondicion2: Prisma.$GrupoPayload<ExtArgs>
      grupoResultante: Prisma.$GrupoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idGrupoCondicion1: number
      idGrupoCondicion2: number
      idGrupoResultante: number
      descripcionCaso: string | null
      activo: boolean
      fechaCreacion: Date
    }, ExtArgs["result"]["gruposAlternativos"]>
    composites: {}
  }

  type GruposAlternativosGetPayload<S extends boolean | null | undefined | GruposAlternativosDefaultArgs> = $Result.GetResult<Prisma.$GruposAlternativosPayload, S>

  type GruposAlternativosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GruposAlternativosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GruposAlternativosCountAggregateInputType | true
    }

  export interface GruposAlternativosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GruposAlternativos'], meta: { name: 'GruposAlternativos' } }
    /**
     * Find zero or one GruposAlternativos that matches the filter.
     * @param {GruposAlternativosFindUniqueArgs} args - Arguments to find a GruposAlternativos
     * @example
     * // Get one GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GruposAlternativosFindUniqueArgs>(args: SelectSubset<T, GruposAlternativosFindUniqueArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GruposAlternativos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GruposAlternativosFindUniqueOrThrowArgs} args - Arguments to find a GruposAlternativos
     * @example
     * // Get one GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GruposAlternativosFindUniqueOrThrowArgs>(args: SelectSubset<T, GruposAlternativosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GruposAlternativos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosFindFirstArgs} args - Arguments to find a GruposAlternativos
     * @example
     * // Get one GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GruposAlternativosFindFirstArgs>(args?: SelectSubset<T, GruposAlternativosFindFirstArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GruposAlternativos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosFindFirstOrThrowArgs} args - Arguments to find a GruposAlternativos
     * @example
     * // Get one GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GruposAlternativosFindFirstOrThrowArgs>(args?: SelectSubset<T, GruposAlternativosFindFirstOrThrowArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GruposAlternativos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findMany()
     * 
     * // Get first 10 GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gruposAlternativosWithIdOnly = await prisma.gruposAlternativos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GruposAlternativosFindManyArgs>(args?: SelectSubset<T, GruposAlternativosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GruposAlternativos.
     * @param {GruposAlternativosCreateArgs} args - Arguments to create a GruposAlternativos.
     * @example
     * // Create one GruposAlternativos
     * const GruposAlternativos = await prisma.gruposAlternativos.create({
     *   data: {
     *     // ... data to create a GruposAlternativos
     *   }
     * })
     * 
     */
    create<T extends GruposAlternativosCreateArgs>(args: SelectSubset<T, GruposAlternativosCreateArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GruposAlternativos.
     * @param {GruposAlternativosCreateManyArgs} args - Arguments to create many GruposAlternativos.
     * @example
     * // Create many GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GruposAlternativosCreateManyArgs>(args?: SelectSubset<T, GruposAlternativosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GruposAlternativos and returns the data saved in the database.
     * @param {GruposAlternativosCreateManyAndReturnArgs} args - Arguments to create many GruposAlternativos.
     * @example
     * // Create many GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GruposAlternativos and only return the `id`
     * const gruposAlternativosWithIdOnly = await prisma.gruposAlternativos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GruposAlternativosCreateManyAndReturnArgs>(args?: SelectSubset<T, GruposAlternativosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GruposAlternativos.
     * @param {GruposAlternativosDeleteArgs} args - Arguments to delete one GruposAlternativos.
     * @example
     * // Delete one GruposAlternativos
     * const GruposAlternativos = await prisma.gruposAlternativos.delete({
     *   where: {
     *     // ... filter to delete one GruposAlternativos
     *   }
     * })
     * 
     */
    delete<T extends GruposAlternativosDeleteArgs>(args: SelectSubset<T, GruposAlternativosDeleteArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GruposAlternativos.
     * @param {GruposAlternativosUpdateArgs} args - Arguments to update one GruposAlternativos.
     * @example
     * // Update one GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GruposAlternativosUpdateArgs>(args: SelectSubset<T, GruposAlternativosUpdateArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GruposAlternativos.
     * @param {GruposAlternativosDeleteManyArgs} args - Arguments to filter GruposAlternativos to delete.
     * @example
     * // Delete a few GruposAlternativos
     * const { count } = await prisma.gruposAlternativos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GruposAlternativosDeleteManyArgs>(args?: SelectSubset<T, GruposAlternativosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GruposAlternativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GruposAlternativosUpdateManyArgs>(args: SelectSubset<T, GruposAlternativosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GruposAlternativos.
     * @param {GruposAlternativosUpsertArgs} args - Arguments to update or create a GruposAlternativos.
     * @example
     * // Update or create a GruposAlternativos
     * const gruposAlternativos = await prisma.gruposAlternativos.upsert({
     *   create: {
     *     // ... data to create a GruposAlternativos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GruposAlternativos we want to update
     *   }
     * })
     */
    upsert<T extends GruposAlternativosUpsertArgs>(args: SelectSubset<T, GruposAlternativosUpsertArgs<ExtArgs>>): Prisma__GruposAlternativosClient<$Result.GetResult<Prisma.$GruposAlternativosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GruposAlternativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosCountArgs} args - Arguments to filter GruposAlternativos to count.
     * @example
     * // Count the number of GruposAlternativos
     * const count = await prisma.gruposAlternativos.count({
     *   where: {
     *     // ... the filter for the GruposAlternativos we want to count
     *   }
     * })
    **/
    count<T extends GruposAlternativosCountArgs>(
      args?: Subset<T, GruposAlternativosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GruposAlternativosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GruposAlternativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GruposAlternativosAggregateArgs>(args: Subset<T, GruposAlternativosAggregateArgs>): Prisma.PrismaPromise<GetGruposAlternativosAggregateType<T>>

    /**
     * Group by GruposAlternativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GruposAlternativosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GruposAlternativosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GruposAlternativosGroupByArgs['orderBy'] }
        : { orderBy?: GruposAlternativosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GruposAlternativosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGruposAlternativosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GruposAlternativos model
   */
  readonly fields: GruposAlternativosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GruposAlternativos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GruposAlternativosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupoCondicion1<T extends GrupoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoDefaultArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grupoCondicion2<T extends GrupoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoDefaultArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grupoResultante<T extends GrupoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoDefaultArgs<ExtArgs>>): Prisma__GrupoClient<$Result.GetResult<Prisma.$GrupoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GruposAlternativos model
   */ 
  interface GruposAlternativosFieldRefs {
    readonly id: FieldRef<"GruposAlternativos", 'Int'>
    readonly idGrupoCondicion1: FieldRef<"GruposAlternativos", 'Int'>
    readonly idGrupoCondicion2: FieldRef<"GruposAlternativos", 'Int'>
    readonly idGrupoResultante: FieldRef<"GruposAlternativos", 'Int'>
    readonly descripcionCaso: FieldRef<"GruposAlternativos", 'String'>
    readonly activo: FieldRef<"GruposAlternativos", 'Boolean'>
    readonly fechaCreacion: FieldRef<"GruposAlternativos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GruposAlternativos findUnique
   */
  export type GruposAlternativosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter, which GruposAlternativos to fetch.
     */
    where: GruposAlternativosWhereUniqueInput
  }

  /**
   * GruposAlternativos findUniqueOrThrow
   */
  export type GruposAlternativosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter, which GruposAlternativos to fetch.
     */
    where: GruposAlternativosWhereUniqueInput
  }

  /**
   * GruposAlternativos findFirst
   */
  export type GruposAlternativosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter, which GruposAlternativos to fetch.
     */
    where?: GruposAlternativosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GruposAlternativos to fetch.
     */
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GruposAlternativos.
     */
    cursor?: GruposAlternativosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GruposAlternativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GruposAlternativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GruposAlternativos.
     */
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * GruposAlternativos findFirstOrThrow
   */
  export type GruposAlternativosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter, which GruposAlternativos to fetch.
     */
    where?: GruposAlternativosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GruposAlternativos to fetch.
     */
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GruposAlternativos.
     */
    cursor?: GruposAlternativosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GruposAlternativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GruposAlternativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GruposAlternativos.
     */
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * GruposAlternativos findMany
   */
  export type GruposAlternativosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter, which GruposAlternativos to fetch.
     */
    where?: GruposAlternativosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GruposAlternativos to fetch.
     */
    orderBy?: GruposAlternativosOrderByWithRelationInput | GruposAlternativosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GruposAlternativos.
     */
    cursor?: GruposAlternativosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GruposAlternativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GruposAlternativos.
     */
    skip?: number
    distinct?: GruposAlternativosScalarFieldEnum | GruposAlternativosScalarFieldEnum[]
  }

  /**
   * GruposAlternativos create
   */
  export type GruposAlternativosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * The data needed to create a GruposAlternativos.
     */
    data: XOR<GruposAlternativosCreateInput, GruposAlternativosUncheckedCreateInput>
  }

  /**
   * GruposAlternativos createMany
   */
  export type GruposAlternativosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GruposAlternativos.
     */
    data: GruposAlternativosCreateManyInput | GruposAlternativosCreateManyInput[]
  }

  /**
   * GruposAlternativos createManyAndReturn
   */
  export type GruposAlternativosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GruposAlternativos.
     */
    data: GruposAlternativosCreateManyInput | GruposAlternativosCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GruposAlternativos update
   */
  export type GruposAlternativosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * The data needed to update a GruposAlternativos.
     */
    data: XOR<GruposAlternativosUpdateInput, GruposAlternativosUncheckedUpdateInput>
    /**
     * Choose, which GruposAlternativos to update.
     */
    where: GruposAlternativosWhereUniqueInput
  }

  /**
   * GruposAlternativos updateMany
   */
  export type GruposAlternativosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GruposAlternativos.
     */
    data: XOR<GruposAlternativosUpdateManyMutationInput, GruposAlternativosUncheckedUpdateManyInput>
    /**
     * Filter which GruposAlternativos to update
     */
    where?: GruposAlternativosWhereInput
  }

  /**
   * GruposAlternativos upsert
   */
  export type GruposAlternativosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * The filter to search for the GruposAlternativos to update in case it exists.
     */
    where: GruposAlternativosWhereUniqueInput
    /**
     * In case the GruposAlternativos found by the `where` argument doesn't exist, create a new GruposAlternativos with this data.
     */
    create: XOR<GruposAlternativosCreateInput, GruposAlternativosUncheckedCreateInput>
    /**
     * In case the GruposAlternativos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GruposAlternativosUpdateInput, GruposAlternativosUncheckedUpdateInput>
  }

  /**
   * GruposAlternativos delete
   */
  export type GruposAlternativosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
    /**
     * Filter which GruposAlternativos to delete.
     */
    where: GruposAlternativosWhereUniqueInput
  }

  /**
   * GruposAlternativos deleteMany
   */
  export type GruposAlternativosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GruposAlternativos to delete
     */
    where?: GruposAlternativosWhereInput
  }

  /**
   * GruposAlternativos without action
   */
  export type GruposAlternativosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GruposAlternativos
     */
    select?: GruposAlternativosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GruposAlternativosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PracticaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    codigo: 'codigo',
    activo: 'activo',
    fechaCreacion: 'fechaCreacion'
  };

  export type PracticaScalarFieldEnum = (typeof PracticaScalarFieldEnum)[keyof typeof PracticaScalarFieldEnum]


  export const GrupoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    ayunoHoras: 'ayunoHoras',
    orinaHoras: 'orinaHoras',
    orinaTipo: 'orinaTipo',
    activo: 'activo',
    fechaAlta: 'fechaAlta',
    fechaBaja: 'fechaBaja',
    fechaUltimaModificacion: 'fechaUltimaModificacion'
  };

  export type GrupoScalarFieldEnum = (typeof GrupoScalarFieldEnum)[keyof typeof GrupoScalarFieldEnum]


  export const IndicacionScalarFieldEnum: {
    id: 'id',
    descripcion: 'descripcion',
    textoInstruccion: 'textoInstruccion',
    tipoIndicacion: 'tipoIndicacion',
    area: 'area',
    estado: 'estado',
    idIndicacionInferior: 'idIndicacionInferior',
    fechaAlta: 'fechaAlta',
    fechaBaja: 'fechaBaja',
    fechaUltimaModificacion: 'fechaUltimaModificacion'
  };

  export type IndicacionScalarFieldEnum = (typeof IndicacionScalarFieldEnum)[keyof typeof IndicacionScalarFieldEnum]


  export const PracticaGrupoScalarFieldEnum: {
    idPractica: 'idPractica',
    idGrupo: 'idGrupo',
    activo: 'activo',
    fechaVinculacion: 'fechaVinculacion'
  };

  export type PracticaGrupoScalarFieldEnum = (typeof PracticaGrupoScalarFieldEnum)[keyof typeof PracticaGrupoScalarFieldEnum]


  export const GrupoIndicacionScalarFieldEnum: {
    idGrupo: 'idGrupo',
    idIndicacion: 'idIndicacion',
    orden: 'orden',
    activo: 'activo',
    fechaVinculacion: 'fechaVinculacion'
  };

  export type GrupoIndicacionScalarFieldEnum = (typeof GrupoIndicacionScalarFieldEnum)[keyof typeof GrupoIndicacionScalarFieldEnum]


  export const GruposAlternativosScalarFieldEnum: {
    id: 'id',
    idGrupoCondicion1: 'idGrupoCondicion1',
    idGrupoCondicion2: 'idGrupoCondicion2',
    idGrupoResultante: 'idGrupoResultante',
    descripcionCaso: 'descripcionCaso',
    activo: 'activo',
    fechaCreacion: 'fechaCreacion'
  };

  export type GruposAlternativosScalarFieldEnum = (typeof GruposAlternativosScalarFieldEnum)[keyof typeof GruposAlternativosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PracticaWhereInput = {
    AND?: PracticaWhereInput | PracticaWhereInput[]
    OR?: PracticaWhereInput[]
    NOT?: PracticaWhereInput | PracticaWhereInput[]
    id?: IntFilter<"Practica"> | number
    nombre?: StringFilter<"Practica"> | string
    codigo?: StringFilter<"Practica"> | string
    activo?: BoolFilter<"Practica"> | boolean
    fechaCreacion?: DateTimeFilter<"Practica"> | Date | string
    grupos?: PracticaGrupoListRelationFilter
  }

  export type PracticaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
    grupos?: PracticaGrupoOrderByRelationAggregateInput
  }

  export type PracticaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    codigo?: string
    AND?: PracticaWhereInput | PracticaWhereInput[]
    OR?: PracticaWhereInput[]
    NOT?: PracticaWhereInput | PracticaWhereInput[]
    nombre?: StringFilter<"Practica"> | string
    activo?: BoolFilter<"Practica"> | boolean
    fechaCreacion?: DateTimeFilter<"Practica"> | Date | string
    grupos?: PracticaGrupoListRelationFilter
  }, "id" | "codigo">

  export type PracticaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
    _count?: PracticaCountOrderByAggregateInput
    _avg?: PracticaAvgOrderByAggregateInput
    _max?: PracticaMaxOrderByAggregateInput
    _min?: PracticaMinOrderByAggregateInput
    _sum?: PracticaSumOrderByAggregateInput
  }

  export type PracticaScalarWhereWithAggregatesInput = {
    AND?: PracticaScalarWhereWithAggregatesInput | PracticaScalarWhereWithAggregatesInput[]
    OR?: PracticaScalarWhereWithAggregatesInput[]
    NOT?: PracticaScalarWhereWithAggregatesInput | PracticaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Practica"> | number
    nombre?: StringWithAggregatesFilter<"Practica"> | string
    codigo?: StringWithAggregatesFilter<"Practica"> | string
    activo?: BoolWithAggregatesFilter<"Practica"> | boolean
    fechaCreacion?: DateTimeWithAggregatesFilter<"Practica"> | Date | string
  }

  export type GrupoWhereInput = {
    AND?: GrupoWhereInput | GrupoWhereInput[]
    OR?: GrupoWhereInput[]
    NOT?: GrupoWhereInput | GrupoWhereInput[]
    id?: IntFilter<"Grupo"> | number
    nombre?: StringFilter<"Grupo"> | string
    descripcion?: StringNullableFilter<"Grupo"> | string | null
    ayunoHoras?: IntNullableFilter<"Grupo"> | number | null
    orinaHoras?: IntNullableFilter<"Grupo"> | number | null
    orinaTipo?: StringNullableFilter<"Grupo"> | string | null
    activo?: BoolFilter<"Grupo"> | boolean
    fechaAlta?: DateTimeFilter<"Grupo"> | Date | string
    fechaBaja?: DateTimeNullableFilter<"Grupo"> | Date | string | null
    fechaUltimaModificacion?: DateTimeFilter<"Grupo"> | Date | string
    practicas?: PracticaGrupoListRelationFilter
    indicaciones?: GrupoIndicacionListRelationFilter
    gruposAlternativosCondicion1?: GruposAlternativosListRelationFilter
    gruposAlternativosCondicion2?: GruposAlternativosListRelationFilter
    gruposAlternativosResultante?: GruposAlternativosListRelationFilter
  }

  export type GrupoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    ayunoHoras?: SortOrderInput | SortOrder
    orinaHoras?: SortOrderInput | SortOrder
    orinaTipo?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    fechaUltimaModificacion?: SortOrder
    practicas?: PracticaGrupoOrderByRelationAggregateInput
    indicaciones?: GrupoIndicacionOrderByRelationAggregateInput
    gruposAlternativosCondicion1?: GruposAlternativosOrderByRelationAggregateInput
    gruposAlternativosCondicion2?: GruposAlternativosOrderByRelationAggregateInput
    gruposAlternativosResultante?: GruposAlternativosOrderByRelationAggregateInput
  }

  export type GrupoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrupoWhereInput | GrupoWhereInput[]
    OR?: GrupoWhereInput[]
    NOT?: GrupoWhereInput | GrupoWhereInput[]
    nombre?: StringFilter<"Grupo"> | string
    descripcion?: StringNullableFilter<"Grupo"> | string | null
    ayunoHoras?: IntNullableFilter<"Grupo"> | number | null
    orinaHoras?: IntNullableFilter<"Grupo"> | number | null
    orinaTipo?: StringNullableFilter<"Grupo"> | string | null
    activo?: BoolFilter<"Grupo"> | boolean
    fechaAlta?: DateTimeFilter<"Grupo"> | Date | string
    fechaBaja?: DateTimeNullableFilter<"Grupo"> | Date | string | null
    fechaUltimaModificacion?: DateTimeFilter<"Grupo"> | Date | string
    practicas?: PracticaGrupoListRelationFilter
    indicaciones?: GrupoIndicacionListRelationFilter
    gruposAlternativosCondicion1?: GruposAlternativosListRelationFilter
    gruposAlternativosCondicion2?: GruposAlternativosListRelationFilter
    gruposAlternativosResultante?: GruposAlternativosListRelationFilter
  }, "id">

  export type GrupoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    ayunoHoras?: SortOrderInput | SortOrder
    orinaHoras?: SortOrderInput | SortOrder
    orinaTipo?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    fechaUltimaModificacion?: SortOrder
    _count?: GrupoCountOrderByAggregateInput
    _avg?: GrupoAvgOrderByAggregateInput
    _max?: GrupoMaxOrderByAggregateInput
    _min?: GrupoMinOrderByAggregateInput
    _sum?: GrupoSumOrderByAggregateInput
  }

  export type GrupoScalarWhereWithAggregatesInput = {
    AND?: GrupoScalarWhereWithAggregatesInput | GrupoScalarWhereWithAggregatesInput[]
    OR?: GrupoScalarWhereWithAggregatesInput[]
    NOT?: GrupoScalarWhereWithAggregatesInput | GrupoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grupo"> | number
    nombre?: StringWithAggregatesFilter<"Grupo"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Grupo"> | string | null
    ayunoHoras?: IntNullableWithAggregatesFilter<"Grupo"> | number | null
    orinaHoras?: IntNullableWithAggregatesFilter<"Grupo"> | number | null
    orinaTipo?: StringNullableWithAggregatesFilter<"Grupo"> | string | null
    activo?: BoolWithAggregatesFilter<"Grupo"> | boolean
    fechaAlta?: DateTimeWithAggregatesFilter<"Grupo"> | Date | string
    fechaBaja?: DateTimeNullableWithAggregatesFilter<"Grupo"> | Date | string | null
    fechaUltimaModificacion?: DateTimeWithAggregatesFilter<"Grupo"> | Date | string
  }

  export type IndicacionWhereInput = {
    AND?: IndicacionWhereInput | IndicacionWhereInput[]
    OR?: IndicacionWhereInput[]
    NOT?: IndicacionWhereInput | IndicacionWhereInput[]
    id?: IntFilter<"Indicacion"> | number
    descripcion?: StringFilter<"Indicacion"> | string
    textoInstruccion?: StringFilter<"Indicacion"> | string
    tipoIndicacion?: StringNullableFilter<"Indicacion"> | string | null
    area?: StringNullableFilter<"Indicacion"> | string | null
    estado?: StringFilter<"Indicacion"> | string
    idIndicacionInferior?: IntNullableFilter<"Indicacion"> | number | null
    fechaAlta?: DateTimeFilter<"Indicacion"> | Date | string
    fechaBaja?: DateTimeNullableFilter<"Indicacion"> | Date | string | null
    fechaUltimaModificacion?: DateTimeFilter<"Indicacion"> | Date | string
    grupos?: GrupoIndicacionListRelationFilter
    indicacionSuperior?: XOR<IndicacionNullableRelationFilter, IndicacionWhereInput> | null
    indicacionesInferiores?: IndicacionListRelationFilter
  }

  export type IndicacionOrderByWithRelationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    textoInstruccion?: SortOrder
    tipoIndicacion?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    estado?: SortOrder
    idIndicacionInferior?: SortOrderInput | SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    fechaUltimaModificacion?: SortOrder
    grupos?: GrupoIndicacionOrderByRelationAggregateInput
    indicacionSuperior?: IndicacionOrderByWithRelationInput
    indicacionesInferiores?: IndicacionOrderByRelationAggregateInput
  }

  export type IndicacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IndicacionWhereInput | IndicacionWhereInput[]
    OR?: IndicacionWhereInput[]
    NOT?: IndicacionWhereInput | IndicacionWhereInput[]
    descripcion?: StringFilter<"Indicacion"> | string
    textoInstruccion?: StringFilter<"Indicacion"> | string
    tipoIndicacion?: StringNullableFilter<"Indicacion"> | string | null
    area?: StringNullableFilter<"Indicacion"> | string | null
    estado?: StringFilter<"Indicacion"> | string
    idIndicacionInferior?: IntNullableFilter<"Indicacion"> | number | null
    fechaAlta?: DateTimeFilter<"Indicacion"> | Date | string
    fechaBaja?: DateTimeNullableFilter<"Indicacion"> | Date | string | null
    fechaUltimaModificacion?: DateTimeFilter<"Indicacion"> | Date | string
    grupos?: GrupoIndicacionListRelationFilter
    indicacionSuperior?: XOR<IndicacionNullableRelationFilter, IndicacionWhereInput> | null
    indicacionesInferiores?: IndicacionListRelationFilter
  }, "id">

  export type IndicacionOrderByWithAggregationInput = {
    id?: SortOrder
    descripcion?: SortOrder
    textoInstruccion?: SortOrder
    tipoIndicacion?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    estado?: SortOrder
    idIndicacionInferior?: SortOrderInput | SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    fechaUltimaModificacion?: SortOrder
    _count?: IndicacionCountOrderByAggregateInput
    _avg?: IndicacionAvgOrderByAggregateInput
    _max?: IndicacionMaxOrderByAggregateInput
    _min?: IndicacionMinOrderByAggregateInput
    _sum?: IndicacionSumOrderByAggregateInput
  }

  export type IndicacionScalarWhereWithAggregatesInput = {
    AND?: IndicacionScalarWhereWithAggregatesInput | IndicacionScalarWhereWithAggregatesInput[]
    OR?: IndicacionScalarWhereWithAggregatesInput[]
    NOT?: IndicacionScalarWhereWithAggregatesInput | IndicacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Indicacion"> | number
    descripcion?: StringWithAggregatesFilter<"Indicacion"> | string
    textoInstruccion?: StringWithAggregatesFilter<"Indicacion"> | string
    tipoIndicacion?: StringNullableWithAggregatesFilter<"Indicacion"> | string | null
    area?: StringNullableWithAggregatesFilter<"Indicacion"> | string | null
    estado?: StringWithAggregatesFilter<"Indicacion"> | string
    idIndicacionInferior?: IntNullableWithAggregatesFilter<"Indicacion"> | number | null
    fechaAlta?: DateTimeWithAggregatesFilter<"Indicacion"> | Date | string
    fechaBaja?: DateTimeNullableWithAggregatesFilter<"Indicacion"> | Date | string | null
    fechaUltimaModificacion?: DateTimeWithAggregatesFilter<"Indicacion"> | Date | string
  }

  export type PracticaGrupoWhereInput = {
    AND?: PracticaGrupoWhereInput | PracticaGrupoWhereInput[]
    OR?: PracticaGrupoWhereInput[]
    NOT?: PracticaGrupoWhereInput | PracticaGrupoWhereInput[]
    idPractica?: IntFilter<"PracticaGrupo"> | number
    idGrupo?: IntFilter<"PracticaGrupo"> | number
    activo?: BoolFilter<"PracticaGrupo"> | boolean
    fechaVinculacion?: DateTimeFilter<"PracticaGrupo"> | Date | string
    practica?: XOR<PracticaRelationFilter, PracticaWhereInput>
    grupo?: XOR<GrupoRelationFilter, GrupoWhereInput>
  }

  export type PracticaGrupoOrderByWithRelationInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
    practica?: PracticaOrderByWithRelationInput
    grupo?: GrupoOrderByWithRelationInput
  }

  export type PracticaGrupoWhereUniqueInput = Prisma.AtLeast<{
    idPractica_idGrupo?: PracticaGrupoIdPracticaIdGrupoCompoundUniqueInput
    AND?: PracticaGrupoWhereInput | PracticaGrupoWhereInput[]
    OR?: PracticaGrupoWhereInput[]
    NOT?: PracticaGrupoWhereInput | PracticaGrupoWhereInput[]
    idPractica?: IntFilter<"PracticaGrupo"> | number
    idGrupo?: IntFilter<"PracticaGrupo"> | number
    activo?: BoolFilter<"PracticaGrupo"> | boolean
    fechaVinculacion?: DateTimeFilter<"PracticaGrupo"> | Date | string
    practica?: XOR<PracticaRelationFilter, PracticaWhereInput>
    grupo?: XOR<GrupoRelationFilter, GrupoWhereInput>
  }, "idPractica_idGrupo">

  export type PracticaGrupoOrderByWithAggregationInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
    _count?: PracticaGrupoCountOrderByAggregateInput
    _avg?: PracticaGrupoAvgOrderByAggregateInput
    _max?: PracticaGrupoMaxOrderByAggregateInput
    _min?: PracticaGrupoMinOrderByAggregateInput
    _sum?: PracticaGrupoSumOrderByAggregateInput
  }

  export type PracticaGrupoScalarWhereWithAggregatesInput = {
    AND?: PracticaGrupoScalarWhereWithAggregatesInput | PracticaGrupoScalarWhereWithAggregatesInput[]
    OR?: PracticaGrupoScalarWhereWithAggregatesInput[]
    NOT?: PracticaGrupoScalarWhereWithAggregatesInput | PracticaGrupoScalarWhereWithAggregatesInput[]
    idPractica?: IntWithAggregatesFilter<"PracticaGrupo"> | number
    idGrupo?: IntWithAggregatesFilter<"PracticaGrupo"> | number
    activo?: BoolWithAggregatesFilter<"PracticaGrupo"> | boolean
    fechaVinculacion?: DateTimeWithAggregatesFilter<"PracticaGrupo"> | Date | string
  }

  export type GrupoIndicacionWhereInput = {
    AND?: GrupoIndicacionWhereInput | GrupoIndicacionWhereInput[]
    OR?: GrupoIndicacionWhereInput[]
    NOT?: GrupoIndicacionWhereInput | GrupoIndicacionWhereInput[]
    idGrupo?: IntFilter<"GrupoIndicacion"> | number
    idIndicacion?: IntFilter<"GrupoIndicacion"> | number
    orden?: IntFilter<"GrupoIndicacion"> | number
    activo?: BoolFilter<"GrupoIndicacion"> | boolean
    fechaVinculacion?: DateTimeFilter<"GrupoIndicacion"> | Date | string
    grupo?: XOR<GrupoRelationFilter, GrupoWhereInput>
    indicacion?: XOR<IndicacionRelationFilter, IndicacionWhereInput>
  }

  export type GrupoIndicacionOrderByWithRelationInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
    grupo?: GrupoOrderByWithRelationInput
    indicacion?: IndicacionOrderByWithRelationInput
  }

  export type GrupoIndicacionWhereUniqueInput = Prisma.AtLeast<{
    idGrupo_idIndicacion?: GrupoIndicacionIdGrupoIdIndicacionCompoundUniqueInput
    AND?: GrupoIndicacionWhereInput | GrupoIndicacionWhereInput[]
    OR?: GrupoIndicacionWhereInput[]
    NOT?: GrupoIndicacionWhereInput | GrupoIndicacionWhereInput[]
    idGrupo?: IntFilter<"GrupoIndicacion"> | number
    idIndicacion?: IntFilter<"GrupoIndicacion"> | number
    orden?: IntFilter<"GrupoIndicacion"> | number
    activo?: BoolFilter<"GrupoIndicacion"> | boolean
    fechaVinculacion?: DateTimeFilter<"GrupoIndicacion"> | Date | string
    grupo?: XOR<GrupoRelationFilter, GrupoWhereInput>
    indicacion?: XOR<IndicacionRelationFilter, IndicacionWhereInput>
  }, "idGrupo_idIndicacion">

  export type GrupoIndicacionOrderByWithAggregationInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
    _count?: GrupoIndicacionCountOrderByAggregateInput
    _avg?: GrupoIndicacionAvgOrderByAggregateInput
    _max?: GrupoIndicacionMaxOrderByAggregateInput
    _min?: GrupoIndicacionMinOrderByAggregateInput
    _sum?: GrupoIndicacionSumOrderByAggregateInput
  }

  export type GrupoIndicacionScalarWhereWithAggregatesInput = {
    AND?: GrupoIndicacionScalarWhereWithAggregatesInput | GrupoIndicacionScalarWhereWithAggregatesInput[]
    OR?: GrupoIndicacionScalarWhereWithAggregatesInput[]
    NOT?: GrupoIndicacionScalarWhereWithAggregatesInput | GrupoIndicacionScalarWhereWithAggregatesInput[]
    idGrupo?: IntWithAggregatesFilter<"GrupoIndicacion"> | number
    idIndicacion?: IntWithAggregatesFilter<"GrupoIndicacion"> | number
    orden?: IntWithAggregatesFilter<"GrupoIndicacion"> | number
    activo?: BoolWithAggregatesFilter<"GrupoIndicacion"> | boolean
    fechaVinculacion?: DateTimeWithAggregatesFilter<"GrupoIndicacion"> | Date | string
  }

  export type GruposAlternativosWhereInput = {
    AND?: GruposAlternativosWhereInput | GruposAlternativosWhereInput[]
    OR?: GruposAlternativosWhereInput[]
    NOT?: GruposAlternativosWhereInput | GruposAlternativosWhereInput[]
    id?: IntFilter<"GruposAlternativos"> | number
    idGrupoCondicion1?: IntFilter<"GruposAlternativos"> | number
    idGrupoCondicion2?: IntFilter<"GruposAlternativos"> | number
    idGrupoResultante?: IntFilter<"GruposAlternativos"> | number
    descripcionCaso?: StringNullableFilter<"GruposAlternativos"> | string | null
    activo?: BoolFilter<"GruposAlternativos"> | boolean
    fechaCreacion?: DateTimeFilter<"GruposAlternativos"> | Date | string
    grupoCondicion1?: XOR<GrupoRelationFilter, GrupoWhereInput>
    grupoCondicion2?: XOR<GrupoRelationFilter, GrupoWhereInput>
    grupoResultante?: XOR<GrupoRelationFilter, GrupoWhereInput>
  }

  export type GruposAlternativosOrderByWithRelationInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
    descripcionCaso?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
    grupoCondicion1?: GrupoOrderByWithRelationInput
    grupoCondicion2?: GrupoOrderByWithRelationInput
    grupoResultante?: GrupoOrderByWithRelationInput
  }

  export type GruposAlternativosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    idGrupoCondicion1_idGrupoCondicion2?: GruposAlternativosIdGrupoCondicion1IdGrupoCondicion2CompoundUniqueInput
    AND?: GruposAlternativosWhereInput | GruposAlternativosWhereInput[]
    OR?: GruposAlternativosWhereInput[]
    NOT?: GruposAlternativosWhereInput | GruposAlternativosWhereInput[]
    idGrupoCondicion1?: IntFilter<"GruposAlternativos"> | number
    idGrupoCondicion2?: IntFilter<"GruposAlternativos"> | number
    idGrupoResultante?: IntFilter<"GruposAlternativos"> | number
    descripcionCaso?: StringNullableFilter<"GruposAlternativos"> | string | null
    activo?: BoolFilter<"GruposAlternativos"> | boolean
    fechaCreacion?: DateTimeFilter<"GruposAlternativos"> | Date | string
    grupoCondicion1?: XOR<GrupoRelationFilter, GrupoWhereInput>
    grupoCondicion2?: XOR<GrupoRelationFilter, GrupoWhereInput>
    grupoResultante?: XOR<GrupoRelationFilter, GrupoWhereInput>
  }, "id" | "idGrupoCondicion1_idGrupoCondicion2">

  export type GruposAlternativosOrderByWithAggregationInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
    descripcionCaso?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
    _count?: GruposAlternativosCountOrderByAggregateInput
    _avg?: GruposAlternativosAvgOrderByAggregateInput
    _max?: GruposAlternativosMaxOrderByAggregateInput
    _min?: GruposAlternativosMinOrderByAggregateInput
    _sum?: GruposAlternativosSumOrderByAggregateInput
  }

  export type GruposAlternativosScalarWhereWithAggregatesInput = {
    AND?: GruposAlternativosScalarWhereWithAggregatesInput | GruposAlternativosScalarWhereWithAggregatesInput[]
    OR?: GruposAlternativosScalarWhereWithAggregatesInput[]
    NOT?: GruposAlternativosScalarWhereWithAggregatesInput | GruposAlternativosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GruposAlternativos"> | number
    idGrupoCondicion1?: IntWithAggregatesFilter<"GruposAlternativos"> | number
    idGrupoCondicion2?: IntWithAggregatesFilter<"GruposAlternativos"> | number
    idGrupoResultante?: IntWithAggregatesFilter<"GruposAlternativos"> | number
    descripcionCaso?: StringNullableWithAggregatesFilter<"GruposAlternativos"> | string | null
    activo?: BoolWithAggregatesFilter<"GruposAlternativos"> | boolean
    fechaCreacion?: DateTimeWithAggregatesFilter<"GruposAlternativos"> | Date | string
  }

  export type PracticaCreateInput = {
    nombre: string
    codigo: string
    activo?: boolean
    fechaCreacion?: Date | string
    grupos?: PracticaGrupoCreateNestedManyWithoutPracticaInput
  }

  export type PracticaUncheckedCreateInput = {
    id?: number
    nombre: string
    codigo: string
    activo?: boolean
    fechaCreacion?: Date | string
    grupos?: PracticaGrupoUncheckedCreateNestedManyWithoutPracticaInput
  }

  export type PracticaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: PracticaGrupoUpdateManyWithoutPracticaNestedInput
  }

  export type PracticaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: PracticaGrupoUncheckedUpdateManyWithoutPracticaNestedInput
  }

  export type PracticaCreateManyInput = {
    id?: number
    nombre: string
    codigo: string
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type PracticaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoCreateInput = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
  }

  export type GrupoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicacionCreateInput = {
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionCreateNestedManyWithoutIndicacionInput
    indicacionSuperior?: IndicacionCreateNestedOneWithoutIndicacionesInferioresInput
    indicacionesInferiores?: IndicacionCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionUncheckedCreateInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    idIndicacionInferior?: number | null
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionUncheckedCreateNestedManyWithoutIndicacionInput
    indicacionesInferiores?: IndicacionUncheckedCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUpdateManyWithoutIndicacionNestedInput
    indicacionSuperior?: IndicacionUpdateOneWithoutIndicacionesInferioresNestedInput
    indicacionesInferiores?: IndicacionUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type IndicacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    idIndicacionInferior?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUncheckedUpdateManyWithoutIndicacionNestedInput
    indicacionesInferiores?: IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type IndicacionCreateManyInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    idIndicacionInferior?: number | null
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
  }

  export type IndicacionUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    idIndicacionInferior?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoCreateInput = {
    activo?: boolean
    fechaVinculacion?: Date | string
    practica: PracticaCreateNestedOneWithoutGruposInput
    grupo: GrupoCreateNestedOneWithoutPracticasInput
  }

  export type PracticaGrupoUncheckedCreateInput = {
    idPractica: number
    idGrupo: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type PracticaGrupoUpdateInput = {
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practica?: PracticaUpdateOneRequiredWithoutGruposNestedInput
    grupo?: GrupoUpdateOneRequiredWithoutPracticasNestedInput
  }

  export type PracticaGrupoUncheckedUpdateInput = {
    idPractica?: IntFieldUpdateOperationsInput | number
    idGrupo?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoCreateManyInput = {
    idPractica: number
    idGrupo: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type PracticaGrupoUpdateManyMutationInput = {
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoUncheckedUpdateManyInput = {
    idPractica?: IntFieldUpdateOperationsInput | number
    idGrupo?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionCreateInput = {
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
    grupo: GrupoCreateNestedOneWithoutIndicacionesInput
    indicacion: IndicacionCreateNestedOneWithoutGruposInput
  }

  export type GrupoIndicacionUncheckedCreateInput = {
    idGrupo: number
    idIndicacion: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GrupoIndicacionUpdateInput = {
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoUpdateOneRequiredWithoutIndicacionesNestedInput
    indicacion?: IndicacionUpdateOneRequiredWithoutGruposNestedInput
  }

  export type GrupoIndicacionUncheckedUpdateInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    idIndicacion?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionCreateManyInput = {
    idGrupo: number
    idIndicacion: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GrupoIndicacionUpdateManyMutationInput = {
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionUncheckedUpdateManyInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    idIndicacion?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosCreateInput = {
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
    grupoCondicion1: GrupoCreateNestedOneWithoutGruposAlternativosCondicion1Input
    grupoCondicion2: GrupoCreateNestedOneWithoutGruposAlternativosCondicion2Input
    grupoResultante: GrupoCreateNestedOneWithoutGruposAlternativosResultanteInput
  }

  export type GruposAlternativosUncheckedCreateInput = {
    id?: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosUpdateInput = {
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoCondicion1?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion1NestedInput
    grupoCondicion2?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion2NestedInput
    grupoResultante?: GrupoUpdateOneRequiredWithoutGruposAlternativosResultanteNestedInput
  }

  export type GruposAlternativosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosCreateManyInput = {
    id?: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosUpdateManyMutationInput = {
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PracticaGrupoListRelationFilter = {
    every?: PracticaGrupoWhereInput
    some?: PracticaGrupoWhereInput
    none?: PracticaGrupoWhereInput
  }

  export type PracticaGrupoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PracticaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type PracticaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PracticaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type PracticaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type PracticaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GrupoIndicacionListRelationFilter = {
    every?: GrupoIndicacionWhereInput
    some?: GrupoIndicacionWhereInput
    none?: GrupoIndicacionWhereInput
  }

  export type GruposAlternativosListRelationFilter = {
    every?: GruposAlternativosWhereInput
    some?: GruposAlternativosWhereInput
    none?: GruposAlternativosWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GrupoIndicacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GruposAlternativosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrupoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    ayunoHoras?: SortOrder
    orinaHoras?: SortOrder
    orinaTipo?: SortOrder
    activo?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type GrupoAvgOrderByAggregateInput = {
    id?: SortOrder
    ayunoHoras?: SortOrder
    orinaHoras?: SortOrder
  }

  export type GrupoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    ayunoHoras?: SortOrder
    orinaHoras?: SortOrder
    orinaTipo?: SortOrder
    activo?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type GrupoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    ayunoHoras?: SortOrder
    orinaHoras?: SortOrder
    orinaTipo?: SortOrder
    activo?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type GrupoSumOrderByAggregateInput = {
    id?: SortOrder
    ayunoHoras?: SortOrder
    orinaHoras?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IndicacionNullableRelationFilter = {
    is?: IndicacionWhereInput | null
    isNot?: IndicacionWhereInput | null
  }

  export type IndicacionListRelationFilter = {
    every?: IndicacionWhereInput
    some?: IndicacionWhereInput
    none?: IndicacionWhereInput
  }

  export type IndicacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IndicacionCountOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    textoInstruccion?: SortOrder
    tipoIndicacion?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    idIndicacionInferior?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type IndicacionAvgOrderByAggregateInput = {
    id?: SortOrder
    idIndicacionInferior?: SortOrder
  }

  export type IndicacionMaxOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    textoInstruccion?: SortOrder
    tipoIndicacion?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    idIndicacionInferior?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type IndicacionMinOrderByAggregateInput = {
    id?: SortOrder
    descripcion?: SortOrder
    textoInstruccion?: SortOrder
    tipoIndicacion?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    idIndicacionInferior?: SortOrder
    fechaAlta?: SortOrder
    fechaBaja?: SortOrder
    fechaUltimaModificacion?: SortOrder
  }

  export type IndicacionSumOrderByAggregateInput = {
    id?: SortOrder
    idIndicacionInferior?: SortOrder
  }

  export type PracticaRelationFilter = {
    is?: PracticaWhereInput
    isNot?: PracticaWhereInput
  }

  export type GrupoRelationFilter = {
    is?: GrupoWhereInput
    isNot?: GrupoWhereInput
  }

  export type PracticaGrupoIdPracticaIdGrupoCompoundUniqueInput = {
    idPractica: number
    idGrupo: number
  }

  export type PracticaGrupoCountOrderByAggregateInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type PracticaGrupoAvgOrderByAggregateInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
  }

  export type PracticaGrupoMaxOrderByAggregateInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type PracticaGrupoMinOrderByAggregateInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type PracticaGrupoSumOrderByAggregateInput = {
    idPractica?: SortOrder
    idGrupo?: SortOrder
  }

  export type IndicacionRelationFilter = {
    is?: IndicacionWhereInput
    isNot?: IndicacionWhereInput
  }

  export type GrupoIndicacionIdGrupoIdIndicacionCompoundUniqueInput = {
    idGrupo: number
    idIndicacion: number
  }

  export type GrupoIndicacionCountOrderByAggregateInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type GrupoIndicacionAvgOrderByAggregateInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
  }

  export type GrupoIndicacionMaxOrderByAggregateInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type GrupoIndicacionMinOrderByAggregateInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
    activo?: SortOrder
    fechaVinculacion?: SortOrder
  }

  export type GrupoIndicacionSumOrderByAggregateInput = {
    idGrupo?: SortOrder
    idIndicacion?: SortOrder
    orden?: SortOrder
  }

  export type GruposAlternativosIdGrupoCondicion1IdGrupoCondicion2CompoundUniqueInput = {
    idGrupoCondicion1: number
    idGrupoCondicion2: number
  }

  export type GruposAlternativosCountOrderByAggregateInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
    descripcionCaso?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type GruposAlternativosAvgOrderByAggregateInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
  }

  export type GruposAlternativosMaxOrderByAggregateInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
    descripcionCaso?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type GruposAlternativosMinOrderByAggregateInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
    descripcionCaso?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type GruposAlternativosSumOrderByAggregateInput = {
    id?: SortOrder
    idGrupoCondicion1?: SortOrder
    idGrupoCondicion2?: SortOrder
    idGrupoResultante?: SortOrder
  }

  export type PracticaGrupoCreateNestedManyWithoutPracticaInput = {
    create?: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput> | PracticaGrupoCreateWithoutPracticaInput[] | PracticaGrupoUncheckedCreateWithoutPracticaInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutPracticaInput | PracticaGrupoCreateOrConnectWithoutPracticaInput[]
    createMany?: PracticaGrupoCreateManyPracticaInputEnvelope
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
  }

  export type PracticaGrupoUncheckedCreateNestedManyWithoutPracticaInput = {
    create?: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput> | PracticaGrupoCreateWithoutPracticaInput[] | PracticaGrupoUncheckedCreateWithoutPracticaInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutPracticaInput | PracticaGrupoCreateOrConnectWithoutPracticaInput[]
    createMany?: PracticaGrupoCreateManyPracticaInputEnvelope
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PracticaGrupoUpdateManyWithoutPracticaNestedInput = {
    create?: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput> | PracticaGrupoCreateWithoutPracticaInput[] | PracticaGrupoUncheckedCreateWithoutPracticaInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutPracticaInput | PracticaGrupoCreateOrConnectWithoutPracticaInput[]
    upsert?: PracticaGrupoUpsertWithWhereUniqueWithoutPracticaInput | PracticaGrupoUpsertWithWhereUniqueWithoutPracticaInput[]
    createMany?: PracticaGrupoCreateManyPracticaInputEnvelope
    set?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    disconnect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    delete?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    update?: PracticaGrupoUpdateWithWhereUniqueWithoutPracticaInput | PracticaGrupoUpdateWithWhereUniqueWithoutPracticaInput[]
    updateMany?: PracticaGrupoUpdateManyWithWhereWithoutPracticaInput | PracticaGrupoUpdateManyWithWhereWithoutPracticaInput[]
    deleteMany?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PracticaGrupoUncheckedUpdateManyWithoutPracticaNestedInput = {
    create?: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput> | PracticaGrupoCreateWithoutPracticaInput[] | PracticaGrupoUncheckedCreateWithoutPracticaInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutPracticaInput | PracticaGrupoCreateOrConnectWithoutPracticaInput[]
    upsert?: PracticaGrupoUpsertWithWhereUniqueWithoutPracticaInput | PracticaGrupoUpsertWithWhereUniqueWithoutPracticaInput[]
    createMany?: PracticaGrupoCreateManyPracticaInputEnvelope
    set?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    disconnect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    delete?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    update?: PracticaGrupoUpdateWithWhereUniqueWithoutPracticaInput | PracticaGrupoUpdateWithWhereUniqueWithoutPracticaInput[]
    updateMany?: PracticaGrupoUpdateManyWithWhereWithoutPracticaInput | PracticaGrupoUpdateManyWithWhereWithoutPracticaInput[]
    deleteMany?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
  }

  export type PracticaGrupoCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput> | PracticaGrupoCreateWithoutGrupoInput[] | PracticaGrupoUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutGrupoInput | PracticaGrupoCreateOrConnectWithoutGrupoInput[]
    createMany?: PracticaGrupoCreateManyGrupoInputEnvelope
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
  }

  export type GrupoIndicacionCreateNestedManyWithoutGrupoInput = {
    create?: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput> | GrupoIndicacionCreateWithoutGrupoInput[] | GrupoIndicacionUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutGrupoInput | GrupoIndicacionCreateOrConnectWithoutGrupoInput[]
    createMany?: GrupoIndicacionCreateManyGrupoInputEnvelope
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
  }

  export type GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input> | GruposAlternativosCreateWithoutGrupoCondicion1Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion1InputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input> | GruposAlternativosCreateWithoutGrupoCondicion2Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion2InputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput> | GruposAlternativosCreateWithoutGrupoResultanteInput[] | GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput | GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput[]
    createMany?: GruposAlternativosCreateManyGrupoResultanteInputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput> | PracticaGrupoCreateWithoutGrupoInput[] | PracticaGrupoUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutGrupoInput | PracticaGrupoCreateOrConnectWithoutGrupoInput[]
    createMany?: PracticaGrupoCreateManyGrupoInputEnvelope
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
  }

  export type GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput> | GrupoIndicacionCreateWithoutGrupoInput[] | GrupoIndicacionUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutGrupoInput | GrupoIndicacionCreateOrConnectWithoutGrupoInput[]
    createMany?: GrupoIndicacionCreateManyGrupoInputEnvelope
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
  }

  export type GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input> | GruposAlternativosCreateWithoutGrupoCondicion1Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion1InputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input> | GruposAlternativosCreateWithoutGrupoCondicion2Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion2InputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput> | GruposAlternativosCreateWithoutGrupoResultanteInput[] | GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput | GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput[]
    createMany?: GruposAlternativosCreateManyGrupoResultanteInputEnvelope
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PracticaGrupoUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput> | PracticaGrupoCreateWithoutGrupoInput[] | PracticaGrupoUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutGrupoInput | PracticaGrupoCreateOrConnectWithoutGrupoInput[]
    upsert?: PracticaGrupoUpsertWithWhereUniqueWithoutGrupoInput | PracticaGrupoUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PracticaGrupoCreateManyGrupoInputEnvelope
    set?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    disconnect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    delete?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    update?: PracticaGrupoUpdateWithWhereUniqueWithoutGrupoInput | PracticaGrupoUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PracticaGrupoUpdateManyWithWhereWithoutGrupoInput | PracticaGrupoUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
  }

  export type GrupoIndicacionUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput> | GrupoIndicacionCreateWithoutGrupoInput[] | GrupoIndicacionUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutGrupoInput | GrupoIndicacionCreateOrConnectWithoutGrupoInput[]
    upsert?: GrupoIndicacionUpsertWithWhereUniqueWithoutGrupoInput | GrupoIndicacionUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: GrupoIndicacionCreateManyGrupoInputEnvelope
    set?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    disconnect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    delete?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    update?: GrupoIndicacionUpdateWithWhereUniqueWithoutGrupoInput | GrupoIndicacionUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: GrupoIndicacionUpdateManyWithWhereWithoutGrupoInput | GrupoIndicacionUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
  }

  export type GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input> | GruposAlternativosCreateWithoutGrupoCondicion1Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion1Input | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion1Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion1InputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion1Input | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion1Input[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion1Input | GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion1Input[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input> | GruposAlternativosCreateWithoutGrupoCondicion2Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion2Input | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion2Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion2InputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion2Input | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion2Input[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion2Input | GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion2Input[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput> | GruposAlternativosCreateWithoutGrupoResultanteInput[] | GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput | GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoResultanteInput | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoResultanteInput[]
    createMany?: GruposAlternativosCreateManyGrupoResultanteInputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoResultanteInput | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoResultanteInput[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoResultanteInput | GruposAlternativosUpdateManyWithWhereWithoutGrupoResultanteInput[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput> | PracticaGrupoCreateWithoutGrupoInput[] | PracticaGrupoUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PracticaGrupoCreateOrConnectWithoutGrupoInput | PracticaGrupoCreateOrConnectWithoutGrupoInput[]
    upsert?: PracticaGrupoUpsertWithWhereUniqueWithoutGrupoInput | PracticaGrupoUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PracticaGrupoCreateManyGrupoInputEnvelope
    set?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    disconnect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    delete?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    connect?: PracticaGrupoWhereUniqueInput | PracticaGrupoWhereUniqueInput[]
    update?: PracticaGrupoUpdateWithWhereUniqueWithoutGrupoInput | PracticaGrupoUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PracticaGrupoUpdateManyWithWhereWithoutGrupoInput | PracticaGrupoUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
  }

  export type GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput> | GrupoIndicacionCreateWithoutGrupoInput[] | GrupoIndicacionUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutGrupoInput | GrupoIndicacionCreateOrConnectWithoutGrupoInput[]
    upsert?: GrupoIndicacionUpsertWithWhereUniqueWithoutGrupoInput | GrupoIndicacionUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: GrupoIndicacionCreateManyGrupoInputEnvelope
    set?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    disconnect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    delete?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    update?: GrupoIndicacionUpdateWithWhereUniqueWithoutGrupoInput | GrupoIndicacionUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: GrupoIndicacionUpdateManyWithWhereWithoutGrupoInput | GrupoIndicacionUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input> | GruposAlternativosCreateWithoutGrupoCondicion1Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion1Input | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion1Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion1InputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion1Input | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion1Input[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion1Input | GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion1Input[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input> | GruposAlternativosCreateWithoutGrupoCondicion2Input[] | GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input | GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion2Input | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion2Input[]
    createMany?: GruposAlternativosCreateManyGrupoCondicion2InputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion2Input | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion2Input[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion2Input | GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion2Input[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput = {
    create?: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput> | GruposAlternativosCreateWithoutGrupoResultanteInput[] | GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput[]
    connectOrCreate?: GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput | GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput[]
    upsert?: GruposAlternativosUpsertWithWhereUniqueWithoutGrupoResultanteInput | GruposAlternativosUpsertWithWhereUniqueWithoutGrupoResultanteInput[]
    createMany?: GruposAlternativosCreateManyGrupoResultanteInputEnvelope
    set?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    disconnect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    delete?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    connect?: GruposAlternativosWhereUniqueInput | GruposAlternativosWhereUniqueInput[]
    update?: GruposAlternativosUpdateWithWhereUniqueWithoutGrupoResultanteInput | GruposAlternativosUpdateWithWhereUniqueWithoutGrupoResultanteInput[]
    updateMany?: GruposAlternativosUpdateManyWithWhereWithoutGrupoResultanteInput | GruposAlternativosUpdateManyWithWhereWithoutGrupoResultanteInput[]
    deleteMany?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
  }

  export type GrupoIndicacionCreateNestedManyWithoutIndicacionInput = {
    create?: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput> | GrupoIndicacionCreateWithoutIndicacionInput[] | GrupoIndicacionUncheckedCreateWithoutIndicacionInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutIndicacionInput | GrupoIndicacionCreateOrConnectWithoutIndicacionInput[]
    createMany?: GrupoIndicacionCreateManyIndicacionInputEnvelope
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
  }

  export type IndicacionCreateNestedOneWithoutIndicacionesInferioresInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionesInferioresInput, IndicacionUncheckedCreateWithoutIndicacionesInferioresInput>
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionesInferioresInput
    connect?: IndicacionWhereUniqueInput
  }

  export type IndicacionCreateNestedManyWithoutIndicacionSuperiorInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput> | IndicacionCreateWithoutIndicacionSuperiorInput[] | IndicacionUncheckedCreateWithoutIndicacionSuperiorInput[]
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionSuperiorInput | IndicacionCreateOrConnectWithoutIndicacionSuperiorInput[]
    createMany?: IndicacionCreateManyIndicacionSuperiorInputEnvelope
    connect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
  }

  export type GrupoIndicacionUncheckedCreateNestedManyWithoutIndicacionInput = {
    create?: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput> | GrupoIndicacionCreateWithoutIndicacionInput[] | GrupoIndicacionUncheckedCreateWithoutIndicacionInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutIndicacionInput | GrupoIndicacionCreateOrConnectWithoutIndicacionInput[]
    createMany?: GrupoIndicacionCreateManyIndicacionInputEnvelope
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
  }

  export type IndicacionUncheckedCreateNestedManyWithoutIndicacionSuperiorInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput> | IndicacionCreateWithoutIndicacionSuperiorInput[] | IndicacionUncheckedCreateWithoutIndicacionSuperiorInput[]
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionSuperiorInput | IndicacionCreateOrConnectWithoutIndicacionSuperiorInput[]
    createMany?: IndicacionCreateManyIndicacionSuperiorInputEnvelope
    connect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
  }

  export type GrupoIndicacionUpdateManyWithoutIndicacionNestedInput = {
    create?: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput> | GrupoIndicacionCreateWithoutIndicacionInput[] | GrupoIndicacionUncheckedCreateWithoutIndicacionInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutIndicacionInput | GrupoIndicacionCreateOrConnectWithoutIndicacionInput[]
    upsert?: GrupoIndicacionUpsertWithWhereUniqueWithoutIndicacionInput | GrupoIndicacionUpsertWithWhereUniqueWithoutIndicacionInput[]
    createMany?: GrupoIndicacionCreateManyIndicacionInputEnvelope
    set?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    disconnect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    delete?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    update?: GrupoIndicacionUpdateWithWhereUniqueWithoutIndicacionInput | GrupoIndicacionUpdateWithWhereUniqueWithoutIndicacionInput[]
    updateMany?: GrupoIndicacionUpdateManyWithWhereWithoutIndicacionInput | GrupoIndicacionUpdateManyWithWhereWithoutIndicacionInput[]
    deleteMany?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
  }

  export type IndicacionUpdateOneWithoutIndicacionesInferioresNestedInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionesInferioresInput, IndicacionUncheckedCreateWithoutIndicacionesInferioresInput>
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionesInferioresInput
    upsert?: IndicacionUpsertWithoutIndicacionesInferioresInput
    disconnect?: IndicacionWhereInput | boolean
    delete?: IndicacionWhereInput | boolean
    connect?: IndicacionWhereUniqueInput
    update?: XOR<XOR<IndicacionUpdateToOneWithWhereWithoutIndicacionesInferioresInput, IndicacionUpdateWithoutIndicacionesInferioresInput>, IndicacionUncheckedUpdateWithoutIndicacionesInferioresInput>
  }

  export type IndicacionUpdateManyWithoutIndicacionSuperiorNestedInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput> | IndicacionCreateWithoutIndicacionSuperiorInput[] | IndicacionUncheckedCreateWithoutIndicacionSuperiorInput[]
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionSuperiorInput | IndicacionCreateOrConnectWithoutIndicacionSuperiorInput[]
    upsert?: IndicacionUpsertWithWhereUniqueWithoutIndicacionSuperiorInput | IndicacionUpsertWithWhereUniqueWithoutIndicacionSuperiorInput[]
    createMany?: IndicacionCreateManyIndicacionSuperiorInputEnvelope
    set?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    disconnect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    delete?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    connect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    update?: IndicacionUpdateWithWhereUniqueWithoutIndicacionSuperiorInput | IndicacionUpdateWithWhereUniqueWithoutIndicacionSuperiorInput[]
    updateMany?: IndicacionUpdateManyWithWhereWithoutIndicacionSuperiorInput | IndicacionUpdateManyWithWhereWithoutIndicacionSuperiorInput[]
    deleteMany?: IndicacionScalarWhereInput | IndicacionScalarWhereInput[]
  }

  export type GrupoIndicacionUncheckedUpdateManyWithoutIndicacionNestedInput = {
    create?: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput> | GrupoIndicacionCreateWithoutIndicacionInput[] | GrupoIndicacionUncheckedCreateWithoutIndicacionInput[]
    connectOrCreate?: GrupoIndicacionCreateOrConnectWithoutIndicacionInput | GrupoIndicacionCreateOrConnectWithoutIndicacionInput[]
    upsert?: GrupoIndicacionUpsertWithWhereUniqueWithoutIndicacionInput | GrupoIndicacionUpsertWithWhereUniqueWithoutIndicacionInput[]
    createMany?: GrupoIndicacionCreateManyIndicacionInputEnvelope
    set?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    disconnect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    delete?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    connect?: GrupoIndicacionWhereUniqueInput | GrupoIndicacionWhereUniqueInput[]
    update?: GrupoIndicacionUpdateWithWhereUniqueWithoutIndicacionInput | GrupoIndicacionUpdateWithWhereUniqueWithoutIndicacionInput[]
    updateMany?: GrupoIndicacionUpdateManyWithWhereWithoutIndicacionInput | GrupoIndicacionUpdateManyWithWhereWithoutIndicacionInput[]
    deleteMany?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
  }

  export type IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorNestedInput = {
    create?: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput> | IndicacionCreateWithoutIndicacionSuperiorInput[] | IndicacionUncheckedCreateWithoutIndicacionSuperiorInput[]
    connectOrCreate?: IndicacionCreateOrConnectWithoutIndicacionSuperiorInput | IndicacionCreateOrConnectWithoutIndicacionSuperiorInput[]
    upsert?: IndicacionUpsertWithWhereUniqueWithoutIndicacionSuperiorInput | IndicacionUpsertWithWhereUniqueWithoutIndicacionSuperiorInput[]
    createMany?: IndicacionCreateManyIndicacionSuperiorInputEnvelope
    set?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    disconnect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    delete?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    connect?: IndicacionWhereUniqueInput | IndicacionWhereUniqueInput[]
    update?: IndicacionUpdateWithWhereUniqueWithoutIndicacionSuperiorInput | IndicacionUpdateWithWhereUniqueWithoutIndicacionSuperiorInput[]
    updateMany?: IndicacionUpdateManyWithWhereWithoutIndicacionSuperiorInput | IndicacionUpdateManyWithWhereWithoutIndicacionSuperiorInput[]
    deleteMany?: IndicacionScalarWhereInput | IndicacionScalarWhereInput[]
  }

  export type PracticaCreateNestedOneWithoutGruposInput = {
    create?: XOR<PracticaCreateWithoutGruposInput, PracticaUncheckedCreateWithoutGruposInput>
    connectOrCreate?: PracticaCreateOrConnectWithoutGruposInput
    connect?: PracticaWhereUniqueInput
  }

  export type GrupoCreateNestedOneWithoutPracticasInput = {
    create?: XOR<GrupoCreateWithoutPracticasInput, GrupoUncheckedCreateWithoutPracticasInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutPracticasInput
    connect?: GrupoWhereUniqueInput
  }

  export type PracticaUpdateOneRequiredWithoutGruposNestedInput = {
    create?: XOR<PracticaCreateWithoutGruposInput, PracticaUncheckedCreateWithoutGruposInput>
    connectOrCreate?: PracticaCreateOrConnectWithoutGruposInput
    upsert?: PracticaUpsertWithoutGruposInput
    connect?: PracticaWhereUniqueInput
    update?: XOR<XOR<PracticaUpdateToOneWithWhereWithoutGruposInput, PracticaUpdateWithoutGruposInput>, PracticaUncheckedUpdateWithoutGruposInput>
  }

  export type GrupoUpdateOneRequiredWithoutPracticasNestedInput = {
    create?: XOR<GrupoCreateWithoutPracticasInput, GrupoUncheckedCreateWithoutPracticasInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutPracticasInput
    upsert?: GrupoUpsertWithoutPracticasInput
    connect?: GrupoWhereUniqueInput
    update?: XOR<XOR<GrupoUpdateToOneWithWhereWithoutPracticasInput, GrupoUpdateWithoutPracticasInput>, GrupoUncheckedUpdateWithoutPracticasInput>
  }

  export type GrupoCreateNestedOneWithoutIndicacionesInput = {
    create?: XOR<GrupoCreateWithoutIndicacionesInput, GrupoUncheckedCreateWithoutIndicacionesInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutIndicacionesInput
    connect?: GrupoWhereUniqueInput
  }

  export type IndicacionCreateNestedOneWithoutGruposInput = {
    create?: XOR<IndicacionCreateWithoutGruposInput, IndicacionUncheckedCreateWithoutGruposInput>
    connectOrCreate?: IndicacionCreateOrConnectWithoutGruposInput
    connect?: IndicacionWhereUniqueInput
  }

  export type GrupoUpdateOneRequiredWithoutIndicacionesNestedInput = {
    create?: XOR<GrupoCreateWithoutIndicacionesInput, GrupoUncheckedCreateWithoutIndicacionesInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutIndicacionesInput
    upsert?: GrupoUpsertWithoutIndicacionesInput
    connect?: GrupoWhereUniqueInput
    update?: XOR<XOR<GrupoUpdateToOneWithWhereWithoutIndicacionesInput, GrupoUpdateWithoutIndicacionesInput>, GrupoUncheckedUpdateWithoutIndicacionesInput>
  }

  export type IndicacionUpdateOneRequiredWithoutGruposNestedInput = {
    create?: XOR<IndicacionCreateWithoutGruposInput, IndicacionUncheckedCreateWithoutGruposInput>
    connectOrCreate?: IndicacionCreateOrConnectWithoutGruposInput
    upsert?: IndicacionUpsertWithoutGruposInput
    connect?: IndicacionWhereUniqueInput
    update?: XOR<XOR<IndicacionUpdateToOneWithWhereWithoutGruposInput, IndicacionUpdateWithoutGruposInput>, IndicacionUncheckedUpdateWithoutGruposInput>
  }

  export type GrupoCreateNestedOneWithoutGruposAlternativosCondicion1Input = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion1Input>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosCondicion1Input
    connect?: GrupoWhereUniqueInput
  }

  export type GrupoCreateNestedOneWithoutGruposAlternativosCondicion2Input = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion2Input>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosCondicion2Input
    connect?: GrupoWhereUniqueInput
  }

  export type GrupoCreateNestedOneWithoutGruposAlternativosResultanteInput = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosResultanteInput, GrupoUncheckedCreateWithoutGruposAlternativosResultanteInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosResultanteInput
    connect?: GrupoWhereUniqueInput
  }

  export type GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion1NestedInput = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion1Input>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosCondicion1Input
    upsert?: GrupoUpsertWithoutGruposAlternativosCondicion1Input
    connect?: GrupoWhereUniqueInput
    update?: XOR<XOR<GrupoUpdateToOneWithWhereWithoutGruposAlternativosCondicion1Input, GrupoUpdateWithoutGruposAlternativosCondicion1Input>, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion1Input>
  }

  export type GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion2NestedInput = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion2Input>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosCondicion2Input
    upsert?: GrupoUpsertWithoutGruposAlternativosCondicion2Input
    connect?: GrupoWhereUniqueInput
    update?: XOR<XOR<GrupoUpdateToOneWithWhereWithoutGruposAlternativosCondicion2Input, GrupoUpdateWithoutGruposAlternativosCondicion2Input>, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion2Input>
  }

  export type GrupoUpdateOneRequiredWithoutGruposAlternativosResultanteNestedInput = {
    create?: XOR<GrupoCreateWithoutGruposAlternativosResultanteInput, GrupoUncheckedCreateWithoutGruposAlternativosResultanteInput>
    connectOrCreate?: GrupoCreateOrConnectWithoutGruposAlternativosResultanteInput
    upsert?: GrupoUpsertWithoutGruposAlternativosResultanteInput
    connect?: GrupoWhereUniqueInput
    update?: XOR<XOR<GrupoUpdateToOneWithWhereWithoutGruposAlternativosResultanteInput, GrupoUpdateWithoutGruposAlternativosResultanteInput>, GrupoUncheckedUpdateWithoutGruposAlternativosResultanteInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PracticaGrupoCreateWithoutPracticaInput = {
    activo?: boolean
    fechaVinculacion?: Date | string
    grupo: GrupoCreateNestedOneWithoutPracticasInput
  }

  export type PracticaGrupoUncheckedCreateWithoutPracticaInput = {
    idGrupo: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type PracticaGrupoCreateOrConnectWithoutPracticaInput = {
    where: PracticaGrupoWhereUniqueInput
    create: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput>
  }

  export type PracticaGrupoCreateManyPracticaInputEnvelope = {
    data: PracticaGrupoCreateManyPracticaInput | PracticaGrupoCreateManyPracticaInput[]
  }

  export type PracticaGrupoUpsertWithWhereUniqueWithoutPracticaInput = {
    where: PracticaGrupoWhereUniqueInput
    update: XOR<PracticaGrupoUpdateWithoutPracticaInput, PracticaGrupoUncheckedUpdateWithoutPracticaInput>
    create: XOR<PracticaGrupoCreateWithoutPracticaInput, PracticaGrupoUncheckedCreateWithoutPracticaInput>
  }

  export type PracticaGrupoUpdateWithWhereUniqueWithoutPracticaInput = {
    where: PracticaGrupoWhereUniqueInput
    data: XOR<PracticaGrupoUpdateWithoutPracticaInput, PracticaGrupoUncheckedUpdateWithoutPracticaInput>
  }

  export type PracticaGrupoUpdateManyWithWhereWithoutPracticaInput = {
    where: PracticaGrupoScalarWhereInput
    data: XOR<PracticaGrupoUpdateManyMutationInput, PracticaGrupoUncheckedUpdateManyWithoutPracticaInput>
  }

  export type PracticaGrupoScalarWhereInput = {
    AND?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
    OR?: PracticaGrupoScalarWhereInput[]
    NOT?: PracticaGrupoScalarWhereInput | PracticaGrupoScalarWhereInput[]
    idPractica?: IntFilter<"PracticaGrupo"> | number
    idGrupo?: IntFilter<"PracticaGrupo"> | number
    activo?: BoolFilter<"PracticaGrupo"> | boolean
    fechaVinculacion?: DateTimeFilter<"PracticaGrupo"> | Date | string
  }

  export type PracticaGrupoCreateWithoutGrupoInput = {
    activo?: boolean
    fechaVinculacion?: Date | string
    practica: PracticaCreateNestedOneWithoutGruposInput
  }

  export type PracticaGrupoUncheckedCreateWithoutGrupoInput = {
    idPractica: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type PracticaGrupoCreateOrConnectWithoutGrupoInput = {
    where: PracticaGrupoWhereUniqueInput
    create: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput>
  }

  export type PracticaGrupoCreateManyGrupoInputEnvelope = {
    data: PracticaGrupoCreateManyGrupoInput | PracticaGrupoCreateManyGrupoInput[]
  }

  export type GrupoIndicacionCreateWithoutGrupoInput = {
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
    indicacion: IndicacionCreateNestedOneWithoutGruposInput
  }

  export type GrupoIndicacionUncheckedCreateWithoutGrupoInput = {
    idIndicacion: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GrupoIndicacionCreateOrConnectWithoutGrupoInput = {
    where: GrupoIndicacionWhereUniqueInput
    create: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput>
  }

  export type GrupoIndicacionCreateManyGrupoInputEnvelope = {
    data: GrupoIndicacionCreateManyGrupoInput | GrupoIndicacionCreateManyGrupoInput[]
  }

  export type GruposAlternativosCreateWithoutGrupoCondicion1Input = {
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
    grupoCondicion2: GrupoCreateNestedOneWithoutGruposAlternativosCondicion2Input
    grupoResultante: GrupoCreateNestedOneWithoutGruposAlternativosResultanteInput
  }

  export type GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input = {
    id?: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosCreateOrConnectWithoutGrupoCondicion1Input = {
    where: GruposAlternativosWhereUniqueInput
    create: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input>
  }

  export type GruposAlternativosCreateManyGrupoCondicion1InputEnvelope = {
    data: GruposAlternativosCreateManyGrupoCondicion1Input | GruposAlternativosCreateManyGrupoCondicion1Input[]
  }

  export type GruposAlternativosCreateWithoutGrupoCondicion2Input = {
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
    grupoCondicion1: GrupoCreateNestedOneWithoutGruposAlternativosCondicion1Input
    grupoResultante: GrupoCreateNestedOneWithoutGruposAlternativosResultanteInput
  }

  export type GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input = {
    id?: number
    idGrupoCondicion1: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosCreateOrConnectWithoutGrupoCondicion2Input = {
    where: GruposAlternativosWhereUniqueInput
    create: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input>
  }

  export type GruposAlternativosCreateManyGrupoCondicion2InputEnvelope = {
    data: GruposAlternativosCreateManyGrupoCondicion2Input | GruposAlternativosCreateManyGrupoCondicion2Input[]
  }

  export type GruposAlternativosCreateWithoutGrupoResultanteInput = {
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
    grupoCondicion1: GrupoCreateNestedOneWithoutGruposAlternativosCondicion1Input
    grupoCondicion2: GrupoCreateNestedOneWithoutGruposAlternativosCondicion2Input
  }

  export type GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput = {
    id?: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosCreateOrConnectWithoutGrupoResultanteInput = {
    where: GruposAlternativosWhereUniqueInput
    create: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput>
  }

  export type GruposAlternativosCreateManyGrupoResultanteInputEnvelope = {
    data: GruposAlternativosCreateManyGrupoResultanteInput | GruposAlternativosCreateManyGrupoResultanteInput[]
  }

  export type PracticaGrupoUpsertWithWhereUniqueWithoutGrupoInput = {
    where: PracticaGrupoWhereUniqueInput
    update: XOR<PracticaGrupoUpdateWithoutGrupoInput, PracticaGrupoUncheckedUpdateWithoutGrupoInput>
    create: XOR<PracticaGrupoCreateWithoutGrupoInput, PracticaGrupoUncheckedCreateWithoutGrupoInput>
  }

  export type PracticaGrupoUpdateWithWhereUniqueWithoutGrupoInput = {
    where: PracticaGrupoWhereUniqueInput
    data: XOR<PracticaGrupoUpdateWithoutGrupoInput, PracticaGrupoUncheckedUpdateWithoutGrupoInput>
  }

  export type PracticaGrupoUpdateManyWithWhereWithoutGrupoInput = {
    where: PracticaGrupoScalarWhereInput
    data: XOR<PracticaGrupoUpdateManyMutationInput, PracticaGrupoUncheckedUpdateManyWithoutGrupoInput>
  }

  export type GrupoIndicacionUpsertWithWhereUniqueWithoutGrupoInput = {
    where: GrupoIndicacionWhereUniqueInput
    update: XOR<GrupoIndicacionUpdateWithoutGrupoInput, GrupoIndicacionUncheckedUpdateWithoutGrupoInput>
    create: XOR<GrupoIndicacionCreateWithoutGrupoInput, GrupoIndicacionUncheckedCreateWithoutGrupoInput>
  }

  export type GrupoIndicacionUpdateWithWhereUniqueWithoutGrupoInput = {
    where: GrupoIndicacionWhereUniqueInput
    data: XOR<GrupoIndicacionUpdateWithoutGrupoInput, GrupoIndicacionUncheckedUpdateWithoutGrupoInput>
  }

  export type GrupoIndicacionUpdateManyWithWhereWithoutGrupoInput = {
    where: GrupoIndicacionScalarWhereInput
    data: XOR<GrupoIndicacionUpdateManyMutationInput, GrupoIndicacionUncheckedUpdateManyWithoutGrupoInput>
  }

  export type GrupoIndicacionScalarWhereInput = {
    AND?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
    OR?: GrupoIndicacionScalarWhereInput[]
    NOT?: GrupoIndicacionScalarWhereInput | GrupoIndicacionScalarWhereInput[]
    idGrupo?: IntFilter<"GrupoIndicacion"> | number
    idIndicacion?: IntFilter<"GrupoIndicacion"> | number
    orden?: IntFilter<"GrupoIndicacion"> | number
    activo?: BoolFilter<"GrupoIndicacion"> | boolean
    fechaVinculacion?: DateTimeFilter<"GrupoIndicacion"> | Date | string
  }

  export type GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion1Input = {
    where: GruposAlternativosWhereUniqueInput
    update: XOR<GruposAlternativosUpdateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedUpdateWithoutGrupoCondicion1Input>
    create: XOR<GruposAlternativosCreateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion1Input>
  }

  export type GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion1Input = {
    where: GruposAlternativosWhereUniqueInput
    data: XOR<GruposAlternativosUpdateWithoutGrupoCondicion1Input, GruposAlternativosUncheckedUpdateWithoutGrupoCondicion1Input>
  }

  export type GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion1Input = {
    where: GruposAlternativosScalarWhereInput
    data: XOR<GruposAlternativosUpdateManyMutationInput, GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1Input>
  }

  export type GruposAlternativosScalarWhereInput = {
    AND?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
    OR?: GruposAlternativosScalarWhereInput[]
    NOT?: GruposAlternativosScalarWhereInput | GruposAlternativosScalarWhereInput[]
    id?: IntFilter<"GruposAlternativos"> | number
    idGrupoCondicion1?: IntFilter<"GruposAlternativos"> | number
    idGrupoCondicion2?: IntFilter<"GruposAlternativos"> | number
    idGrupoResultante?: IntFilter<"GruposAlternativos"> | number
    descripcionCaso?: StringNullableFilter<"GruposAlternativos"> | string | null
    activo?: BoolFilter<"GruposAlternativos"> | boolean
    fechaCreacion?: DateTimeFilter<"GruposAlternativos"> | Date | string
  }

  export type GruposAlternativosUpsertWithWhereUniqueWithoutGrupoCondicion2Input = {
    where: GruposAlternativosWhereUniqueInput
    update: XOR<GruposAlternativosUpdateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedUpdateWithoutGrupoCondicion2Input>
    create: XOR<GruposAlternativosCreateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedCreateWithoutGrupoCondicion2Input>
  }

  export type GruposAlternativosUpdateWithWhereUniqueWithoutGrupoCondicion2Input = {
    where: GruposAlternativosWhereUniqueInput
    data: XOR<GruposAlternativosUpdateWithoutGrupoCondicion2Input, GruposAlternativosUncheckedUpdateWithoutGrupoCondicion2Input>
  }

  export type GruposAlternativosUpdateManyWithWhereWithoutGrupoCondicion2Input = {
    where: GruposAlternativosScalarWhereInput
    data: XOR<GruposAlternativosUpdateManyMutationInput, GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2Input>
  }

  export type GruposAlternativosUpsertWithWhereUniqueWithoutGrupoResultanteInput = {
    where: GruposAlternativosWhereUniqueInput
    update: XOR<GruposAlternativosUpdateWithoutGrupoResultanteInput, GruposAlternativosUncheckedUpdateWithoutGrupoResultanteInput>
    create: XOR<GruposAlternativosCreateWithoutGrupoResultanteInput, GruposAlternativosUncheckedCreateWithoutGrupoResultanteInput>
  }

  export type GruposAlternativosUpdateWithWhereUniqueWithoutGrupoResultanteInput = {
    where: GruposAlternativosWhereUniqueInput
    data: XOR<GruposAlternativosUpdateWithoutGrupoResultanteInput, GruposAlternativosUncheckedUpdateWithoutGrupoResultanteInput>
  }

  export type GruposAlternativosUpdateManyWithWhereWithoutGrupoResultanteInput = {
    where: GruposAlternativosScalarWhereInput
    data: XOR<GruposAlternativosUpdateManyMutationInput, GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteInput>
  }

  export type GrupoIndicacionCreateWithoutIndicacionInput = {
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
    grupo: GrupoCreateNestedOneWithoutIndicacionesInput
  }

  export type GrupoIndicacionUncheckedCreateWithoutIndicacionInput = {
    idGrupo: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GrupoIndicacionCreateOrConnectWithoutIndicacionInput = {
    where: GrupoIndicacionWhereUniqueInput
    create: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput>
  }

  export type GrupoIndicacionCreateManyIndicacionInputEnvelope = {
    data: GrupoIndicacionCreateManyIndicacionInput | GrupoIndicacionCreateManyIndicacionInput[]
  }

  export type IndicacionCreateWithoutIndicacionesInferioresInput = {
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionCreateNestedManyWithoutIndicacionInput
    indicacionSuperior?: IndicacionCreateNestedOneWithoutIndicacionesInferioresInput
  }

  export type IndicacionUncheckedCreateWithoutIndicacionesInferioresInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    idIndicacionInferior?: number | null
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionUncheckedCreateNestedManyWithoutIndicacionInput
  }

  export type IndicacionCreateOrConnectWithoutIndicacionesInferioresInput = {
    where: IndicacionWhereUniqueInput
    create: XOR<IndicacionCreateWithoutIndicacionesInferioresInput, IndicacionUncheckedCreateWithoutIndicacionesInferioresInput>
  }

  export type IndicacionCreateWithoutIndicacionSuperiorInput = {
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionCreateNestedManyWithoutIndicacionInput
    indicacionesInferiores?: IndicacionCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionUncheckedCreateWithoutIndicacionSuperiorInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    grupos?: GrupoIndicacionUncheckedCreateNestedManyWithoutIndicacionInput
    indicacionesInferiores?: IndicacionUncheckedCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionCreateOrConnectWithoutIndicacionSuperiorInput = {
    where: IndicacionWhereUniqueInput
    create: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput>
  }

  export type IndicacionCreateManyIndicacionSuperiorInputEnvelope = {
    data: IndicacionCreateManyIndicacionSuperiorInput | IndicacionCreateManyIndicacionSuperiorInput[]
  }

  export type GrupoIndicacionUpsertWithWhereUniqueWithoutIndicacionInput = {
    where: GrupoIndicacionWhereUniqueInput
    update: XOR<GrupoIndicacionUpdateWithoutIndicacionInput, GrupoIndicacionUncheckedUpdateWithoutIndicacionInput>
    create: XOR<GrupoIndicacionCreateWithoutIndicacionInput, GrupoIndicacionUncheckedCreateWithoutIndicacionInput>
  }

  export type GrupoIndicacionUpdateWithWhereUniqueWithoutIndicacionInput = {
    where: GrupoIndicacionWhereUniqueInput
    data: XOR<GrupoIndicacionUpdateWithoutIndicacionInput, GrupoIndicacionUncheckedUpdateWithoutIndicacionInput>
  }

  export type GrupoIndicacionUpdateManyWithWhereWithoutIndicacionInput = {
    where: GrupoIndicacionScalarWhereInput
    data: XOR<GrupoIndicacionUpdateManyMutationInput, GrupoIndicacionUncheckedUpdateManyWithoutIndicacionInput>
  }

  export type IndicacionUpsertWithoutIndicacionesInferioresInput = {
    update: XOR<IndicacionUpdateWithoutIndicacionesInferioresInput, IndicacionUncheckedUpdateWithoutIndicacionesInferioresInput>
    create: XOR<IndicacionCreateWithoutIndicacionesInferioresInput, IndicacionUncheckedCreateWithoutIndicacionesInferioresInput>
    where?: IndicacionWhereInput
  }

  export type IndicacionUpdateToOneWithWhereWithoutIndicacionesInferioresInput = {
    where?: IndicacionWhereInput
    data: XOR<IndicacionUpdateWithoutIndicacionesInferioresInput, IndicacionUncheckedUpdateWithoutIndicacionesInferioresInput>
  }

  export type IndicacionUpdateWithoutIndicacionesInferioresInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUpdateManyWithoutIndicacionNestedInput
    indicacionSuperior?: IndicacionUpdateOneWithoutIndicacionesInferioresNestedInput
  }

  export type IndicacionUncheckedUpdateWithoutIndicacionesInferioresInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    idIndicacionInferior?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUncheckedUpdateManyWithoutIndicacionNestedInput
  }

  export type IndicacionUpsertWithWhereUniqueWithoutIndicacionSuperiorInput = {
    where: IndicacionWhereUniqueInput
    update: XOR<IndicacionUpdateWithoutIndicacionSuperiorInput, IndicacionUncheckedUpdateWithoutIndicacionSuperiorInput>
    create: XOR<IndicacionCreateWithoutIndicacionSuperiorInput, IndicacionUncheckedCreateWithoutIndicacionSuperiorInput>
  }

  export type IndicacionUpdateWithWhereUniqueWithoutIndicacionSuperiorInput = {
    where: IndicacionWhereUniqueInput
    data: XOR<IndicacionUpdateWithoutIndicacionSuperiorInput, IndicacionUncheckedUpdateWithoutIndicacionSuperiorInput>
  }

  export type IndicacionUpdateManyWithWhereWithoutIndicacionSuperiorInput = {
    where: IndicacionScalarWhereInput
    data: XOR<IndicacionUpdateManyMutationInput, IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorInput>
  }

  export type IndicacionScalarWhereInput = {
    AND?: IndicacionScalarWhereInput | IndicacionScalarWhereInput[]
    OR?: IndicacionScalarWhereInput[]
    NOT?: IndicacionScalarWhereInput | IndicacionScalarWhereInput[]
    id?: IntFilter<"Indicacion"> | number
    descripcion?: StringFilter<"Indicacion"> | string
    textoInstruccion?: StringFilter<"Indicacion"> | string
    tipoIndicacion?: StringNullableFilter<"Indicacion"> | string | null
    area?: StringNullableFilter<"Indicacion"> | string | null
    estado?: StringFilter<"Indicacion"> | string
    idIndicacionInferior?: IntNullableFilter<"Indicacion"> | number | null
    fechaAlta?: DateTimeFilter<"Indicacion"> | Date | string
    fechaBaja?: DateTimeNullableFilter<"Indicacion"> | Date | string | null
    fechaUltimaModificacion?: DateTimeFilter<"Indicacion"> | Date | string
  }

  export type PracticaCreateWithoutGruposInput = {
    nombre: string
    codigo: string
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type PracticaUncheckedCreateWithoutGruposInput = {
    id?: number
    nombre: string
    codigo: string
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type PracticaCreateOrConnectWithoutGruposInput = {
    where: PracticaWhereUniqueInput
    create: XOR<PracticaCreateWithoutGruposInput, PracticaUncheckedCreateWithoutGruposInput>
  }

  export type GrupoCreateWithoutPracticasInput = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    indicaciones?: GrupoIndicacionCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUncheckedCreateWithoutPracticasInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    indicaciones?: GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoCreateOrConnectWithoutPracticasInput = {
    where: GrupoWhereUniqueInput
    create: XOR<GrupoCreateWithoutPracticasInput, GrupoUncheckedCreateWithoutPracticasInput>
  }

  export type PracticaUpsertWithoutGruposInput = {
    update: XOR<PracticaUpdateWithoutGruposInput, PracticaUncheckedUpdateWithoutGruposInput>
    create: XOR<PracticaCreateWithoutGruposInput, PracticaUncheckedCreateWithoutGruposInput>
    where?: PracticaWhereInput
  }

  export type PracticaUpdateToOneWithWhereWithoutGruposInput = {
    where?: PracticaWhereInput
    data: XOR<PracticaUpdateWithoutGruposInput, PracticaUncheckedUpdateWithoutGruposInput>
  }

  export type PracticaUpdateWithoutGruposInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaUncheckedUpdateWithoutGruposInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoUpsertWithoutPracticasInput = {
    update: XOR<GrupoUpdateWithoutPracticasInput, GrupoUncheckedUpdateWithoutPracticasInput>
    create: XOR<GrupoCreateWithoutPracticasInput, GrupoUncheckedCreateWithoutPracticasInput>
    where?: GrupoWhereInput
  }

  export type GrupoUpdateToOneWithWhereWithoutPracticasInput = {
    where?: GrupoWhereInput
    data: XOR<GrupoUpdateWithoutPracticasInput, GrupoUncheckedUpdateWithoutPracticasInput>
  }

  export type GrupoUpdateWithoutPracticasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    indicaciones?: GrupoIndicacionUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUncheckedUpdateWithoutPracticasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    indicaciones?: GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoCreateWithoutIndicacionesInput = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUncheckedCreateWithoutIndicacionesInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoCreateOrConnectWithoutIndicacionesInput = {
    where: GrupoWhereUniqueInput
    create: XOR<GrupoCreateWithoutIndicacionesInput, GrupoUncheckedCreateWithoutIndicacionesInput>
  }

  export type IndicacionCreateWithoutGruposInput = {
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    indicacionSuperior?: IndicacionCreateNestedOneWithoutIndicacionesInferioresInput
    indicacionesInferiores?: IndicacionCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionUncheckedCreateWithoutGruposInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    idIndicacionInferior?: number | null
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    indicacionesInferiores?: IndicacionUncheckedCreateNestedManyWithoutIndicacionSuperiorInput
  }

  export type IndicacionCreateOrConnectWithoutGruposInput = {
    where: IndicacionWhereUniqueInput
    create: XOR<IndicacionCreateWithoutGruposInput, IndicacionUncheckedCreateWithoutGruposInput>
  }

  export type GrupoUpsertWithoutIndicacionesInput = {
    update: XOR<GrupoUpdateWithoutIndicacionesInput, GrupoUncheckedUpdateWithoutIndicacionesInput>
    create: XOR<GrupoCreateWithoutIndicacionesInput, GrupoUncheckedCreateWithoutIndicacionesInput>
    where?: GrupoWhereInput
  }

  export type GrupoUpdateToOneWithWhereWithoutIndicacionesInput = {
    where?: GrupoWhereInput
    data: XOR<GrupoUpdateWithoutIndicacionesInput, GrupoUncheckedUpdateWithoutIndicacionesInput>
  }

  export type GrupoUpdateWithoutIndicacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUncheckedUpdateWithoutIndicacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type IndicacionUpsertWithoutGruposInput = {
    update: XOR<IndicacionUpdateWithoutGruposInput, IndicacionUncheckedUpdateWithoutGruposInput>
    create: XOR<IndicacionCreateWithoutGruposInput, IndicacionUncheckedCreateWithoutGruposInput>
    where?: IndicacionWhereInput
  }

  export type IndicacionUpdateToOneWithWhereWithoutGruposInput = {
    where?: IndicacionWhereInput
    data: XOR<IndicacionUpdateWithoutGruposInput, IndicacionUncheckedUpdateWithoutGruposInput>
  }

  export type IndicacionUpdateWithoutGruposInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    indicacionSuperior?: IndicacionUpdateOneWithoutIndicacionesInferioresNestedInput
    indicacionesInferiores?: IndicacionUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type IndicacionUncheckedUpdateWithoutGruposInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    idIndicacionInferior?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    indicacionesInferiores?: IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type GrupoCreateWithoutGruposAlternativosCondicion1Input = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion2?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUncheckedCreateWithoutGruposAlternativosCondicion1Input = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input
    gruposAlternativosResultante?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoCreateOrConnectWithoutGruposAlternativosCondicion1Input = {
    where: GrupoWhereUniqueInput
    create: XOR<GrupoCreateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion1Input>
  }

  export type GrupoCreateWithoutGruposAlternativosCondicion2Input = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosResultante?: GruposAlternativosCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoUncheckedCreateWithoutGruposAlternativosCondicion2Input = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosResultante?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoResultanteInput
  }

  export type GrupoCreateOrConnectWithoutGruposAlternativosCondicion2Input = {
    where: GrupoWhereUniqueInput
    create: XOR<GrupoCreateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion2Input>
  }

  export type GrupoCreateWithoutGruposAlternativosResultanteInput = {
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosCreateNestedManyWithoutGrupoCondicion2Input
  }

  export type GrupoUncheckedCreateWithoutGruposAlternativosResultanteInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    ayunoHoras?: number | null
    orinaHoras?: number | null
    orinaTipo?: string | null
    activo?: boolean
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
    practicas?: PracticaGrupoUncheckedCreateNestedManyWithoutGrupoInput
    indicaciones?: GrupoIndicacionUncheckedCreateNestedManyWithoutGrupoInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion1Input
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedCreateNestedManyWithoutGrupoCondicion2Input
  }

  export type GrupoCreateOrConnectWithoutGruposAlternativosResultanteInput = {
    where: GrupoWhereUniqueInput
    create: XOR<GrupoCreateWithoutGruposAlternativosResultanteInput, GrupoUncheckedCreateWithoutGruposAlternativosResultanteInput>
  }

  export type GrupoUpsertWithoutGruposAlternativosCondicion1Input = {
    update: XOR<GrupoUpdateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion1Input>
    create: XOR<GrupoCreateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion1Input>
    where?: GrupoWhereInput
  }

  export type GrupoUpdateToOneWithWhereWithoutGruposAlternativosCondicion1Input = {
    where?: GrupoWhereInput
    data: XOR<GrupoUpdateWithoutGruposAlternativosCondicion1Input, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion1Input>
  }

  export type GrupoUpdateWithoutGruposAlternativosCondicion1Input = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUncheckedUpdateWithoutGruposAlternativosCondicion1Input = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput
    gruposAlternativosResultante?: GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUpsertWithoutGruposAlternativosCondicion2Input = {
    update: XOR<GrupoUpdateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion2Input>
    create: XOR<GrupoCreateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedCreateWithoutGruposAlternativosCondicion2Input>
    where?: GrupoWhereInput
  }

  export type GrupoUpdateToOneWithWhereWithoutGruposAlternativosCondicion2Input = {
    where?: GrupoWhereInput
    data: XOR<GrupoUpdateWithoutGruposAlternativosCondicion2Input, GrupoUncheckedUpdateWithoutGruposAlternativosCondicion2Input>
  }

  export type GrupoUpdateWithoutGruposAlternativosCondicion2Input = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosResultante?: GruposAlternativosUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUncheckedUpdateWithoutGruposAlternativosCondicion2Input = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosResultante?: GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteNestedInput
  }

  export type GrupoUpsertWithoutGruposAlternativosResultanteInput = {
    update: XOR<GrupoUpdateWithoutGruposAlternativosResultanteInput, GrupoUncheckedUpdateWithoutGruposAlternativosResultanteInput>
    create: XOR<GrupoCreateWithoutGruposAlternativosResultanteInput, GrupoUncheckedCreateWithoutGruposAlternativosResultanteInput>
    where?: GrupoWhereInput
  }

  export type GrupoUpdateToOneWithWhereWithoutGruposAlternativosResultanteInput = {
    where?: GrupoWhereInput
    data: XOR<GrupoUpdateWithoutGruposAlternativosResultanteInput, GrupoUncheckedUpdateWithoutGruposAlternativosResultanteInput>
  }

  export type GrupoUpdateWithoutGruposAlternativosResultanteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUpdateManyWithoutGrupoCondicion2NestedInput
  }

  export type GrupoUncheckedUpdateWithoutGruposAlternativosResultanteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    ayunoHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaHoras?: NullableIntFieldUpdateOperationsInput | number | null
    orinaTipo?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practicas?: PracticaGrupoUncheckedUpdateManyWithoutGrupoNestedInput
    indicaciones?: GrupoIndicacionUncheckedUpdateManyWithoutGrupoNestedInput
    gruposAlternativosCondicion1?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1NestedInput
    gruposAlternativosCondicion2?: GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2NestedInput
  }

  export type PracticaGrupoCreateManyPracticaInput = {
    idGrupo: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type PracticaGrupoUpdateWithoutPracticaInput = {
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoUpdateOneRequiredWithoutPracticasNestedInput
  }

  export type PracticaGrupoUncheckedUpdateWithoutPracticaInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoUncheckedUpdateManyWithoutPracticaInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoCreateManyGrupoInput = {
    idPractica: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GrupoIndicacionCreateManyGrupoInput = {
    idIndicacion: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type GruposAlternativosCreateManyGrupoCondicion1Input = {
    id?: number
    idGrupoCondicion2: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosCreateManyGrupoCondicion2Input = {
    id?: number
    idGrupoCondicion1: number
    idGrupoResultante: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type GruposAlternativosCreateManyGrupoResultanteInput = {
    id?: number
    idGrupoCondicion1: number
    idGrupoCondicion2: number
    descripcionCaso?: string | null
    activo?: boolean
    fechaCreacion?: Date | string
  }

  export type PracticaGrupoUpdateWithoutGrupoInput = {
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    practica?: PracticaUpdateOneRequiredWithoutGruposNestedInput
  }

  export type PracticaGrupoUncheckedUpdateWithoutGrupoInput = {
    idPractica?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticaGrupoUncheckedUpdateManyWithoutGrupoInput = {
    idPractica?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionUpdateWithoutGrupoInput = {
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    indicacion?: IndicacionUpdateOneRequiredWithoutGruposNestedInput
  }

  export type GrupoIndicacionUncheckedUpdateWithoutGrupoInput = {
    idIndicacion?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionUncheckedUpdateManyWithoutGrupoInput = {
    idIndicacion?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUpdateWithoutGrupoCondicion1Input = {
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoCondicion2?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion2NestedInput
    grupoResultante?: GrupoUpdateOneRequiredWithoutGruposAlternativosResultanteNestedInput
  }

  export type GruposAlternativosUncheckedUpdateWithoutGrupoCondicion1Input = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion1Input = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUpdateWithoutGrupoCondicion2Input = {
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoCondicion1?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion1NestedInput
    grupoResultante?: GrupoUpdateOneRequiredWithoutGruposAlternativosResultanteNestedInput
  }

  export type GruposAlternativosUncheckedUpdateWithoutGrupoCondicion2Input = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoCondicion2Input = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoResultante?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUpdateWithoutGrupoResultanteInput = {
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoCondicion1?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion1NestedInput
    grupoCondicion2?: GrupoUpdateOneRequiredWithoutGruposAlternativosCondicion2NestedInput
  }

  export type GruposAlternativosUncheckedUpdateWithoutGrupoResultanteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GruposAlternativosUncheckedUpdateManyWithoutGrupoResultanteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion1?: IntFieldUpdateOperationsInput | number
    idGrupoCondicion2?: IntFieldUpdateOperationsInput | number
    descripcionCaso?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionCreateManyIndicacionInput = {
    idGrupo: number
    orden?: number
    activo?: boolean
    fechaVinculacion?: Date | string
  }

  export type IndicacionCreateManyIndicacionSuperiorInput = {
    id?: number
    descripcion: string
    textoInstruccion: string
    tipoIndicacion?: string | null
    area?: string | null
    estado?: string
    fechaAlta?: Date | string
    fechaBaja?: Date | string | null
    fechaUltimaModificacion?: Date | string
  }

  export type GrupoIndicacionUpdateWithoutIndicacionInput = {
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoUpdateOneRequiredWithoutIndicacionesNestedInput
  }

  export type GrupoIndicacionUncheckedUpdateWithoutIndicacionInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoIndicacionUncheckedUpdateManyWithoutIndicacionInput = {
    idGrupo?: IntFieldUpdateOperationsInput | number
    orden?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaVinculacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicacionUpdateWithoutIndicacionSuperiorInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUpdateManyWithoutIndicacionNestedInput
    indicacionesInferiores?: IndicacionUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type IndicacionUncheckedUpdateWithoutIndicacionSuperiorInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    grupos?: GrupoIndicacionUncheckedUpdateManyWithoutIndicacionNestedInput
    indicacionesInferiores?: IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorNestedInput
  }

  export type IndicacionUncheckedUpdateManyWithoutIndicacionSuperiorInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    textoInstruccion?: StringFieldUpdateOperationsInput | string
    tipoIndicacion?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    fechaAlta?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaUltimaModificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PracticaCountOutputTypeDefaultArgs instead
     */
    export type PracticaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PracticaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrupoCountOutputTypeDefaultArgs instead
     */
    export type GrupoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrupoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IndicacionCountOutputTypeDefaultArgs instead
     */
    export type IndicacionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IndicacionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PracticaDefaultArgs instead
     */
    export type PracticaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PracticaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrupoDefaultArgs instead
     */
    export type GrupoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrupoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IndicacionDefaultArgs instead
     */
    export type IndicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IndicacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PracticaGrupoDefaultArgs instead
     */
    export type PracticaGrupoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PracticaGrupoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrupoIndicacionDefaultArgs instead
     */
    export type GrupoIndicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrupoIndicacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GruposAlternativosDefaultArgs instead
     */
    export type GruposAlternativosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GruposAlternativosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}