// verificar-importacion.js
// Script para verificar que los datos se importaron correctamente

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

console.log('üîç VERIFICACI√ìN DE IMPORTACI√ìN DE DATOS');
console.log('======================================');

async function verificarImportacion() {
    try {
        console.log('üìä Consultando estad√≠sticas de la base de datos...\n');
        
        // Contar registros en cada tabla
        const stats = {
            practicas: await prisma.practica.count(),
            grupos: await prisma.grupo.count(),
            indicaciones: await prisma.indicacion.count(),
            practicaGrupo: await prisma.practicaGrupo.count(),
            grupoIndicacion: await prisma.grupoIndicacion.count(),
            gruposAlternativos: await prisma.gruposAlternativos.count()
        };
        
        console.log('üìà RESUMEN DE DATOS IMPORTADOS:');
        console.log('===============================');
        console.log(`   ‚Ä¢ Pr√°cticas: ${stats.practicas}`);
        console.log(`   ‚Ä¢ Grupos: ${stats.grupos}`);
        console.log(`   ‚Ä¢ Indicaciones: ${stats.indicaciones}`);
        console.log(`   ‚Ä¢ V√≠nculos Pr√°ctica-Grupo: ${stats.practicaGrupo}`);
        console.log(`   ‚Ä¢ V√≠nculos Grupo-Indicaci√≥n: ${stats.grupoIndicacion}`);
        console.log(`   ‚Ä¢ Reglas Alternativas: ${stats.gruposAlternativos}`);
        
        // Verificar integridad b√°sica
        console.log('\nüîß VERIFICACIONES DE INTEGRIDAD:');
        console.log('=================================');
        
        // Verificar que todas las pr√°cticas tienen al menos un grupo
        const practicasSinGrupo = await prisma.practica.count({
            where: {
                grupos: {
                    none: {}
                }
            }
        });
        
        if (practicasSinGrupo === 0) {
            console.log('‚úÖ Todas las pr√°cticas est√°n vinculadas a grupos');
        } else {
            console.log(`‚ö†Ô∏è  ${practicasSinGrupo} pr√°cticas NO tienen grupos asignados`);
        }
        
        // Verificar grupos con indicaciones
        const gruposConIndicaciones = await prisma.grupo.count({
            where: {
                indicaciones: {
                    some: {}
                }
            }
        });
        
        console.log(`‚úÖ ${gruposConIndicaciones}/${stats.grupos} grupos tienen indicaciones`);
        
        // Mostrar distribuci√≥n por √°reas
        console.log('\nüè• DISTRIBUCI√ìN POR √ÅREAS:');
        console.log('==========================');
        
        const practicasPorArea = await prisma.$queryRaw`
            SELECT 
                SUBSTR(codigo, 1, INSTR(codigo, '_') - 1) as area,
                COUNT(*) as cantidad
            FROM Practica 
            WHERE activo = 1
            GROUP BY SUBSTR(codigo, 1, INSTR(codigo, '_') - 1)
            ORDER BY cantidad DESC
        `;
        
        practicasPorArea.forEach(area => {
            console.log(`   ‚Ä¢ ${area.area}: ${area.cantidad} pr√°cticas`);
        });
        
        // Mostrar tipos de grupos m√°s comunes
        console.log('\nüß™ TIPOS DE PREPARACI√ìN M√ÅS COMUNES:');
        console.log('=====================================');
        
        const tiposPreparacion = await prisma.grupo.groupBy({
            by: ['ayuno_horas', 'orina_tipo'],
            _count: {
                id_grupo: true
            },
            orderBy: {
                _count: {
                    id_grupo: 'desc'
                }
            },
            take: 10
        });
        
        tiposPreparacion.forEach(tipo => {
            let descripcion = '';
            if (tipo.ayuno_horas) {
                descripcion += `Ayuno ${tipo.ayuno_horas}h`;
            }
            if (tipo.orina_tipo) {
                if (descripcion) descripcion += ' + ';
                descripcion += tipo.orina_tipo.replace('_', ' ');
            }
            if (!descripcion) descripcion = 'Sin preparaci√≥n especial';
            
            console.log(`   ‚Ä¢ ${descripcion}: ${tipo._count.id_grupo} grupos`);
        });
        
        // Probar el algoritmo de generaci√≥n de indicaciones
        console.log('\nüß™ PRUEBA DEL ALGORITMO DE GENERACI√ìN:');
        console.log('======================================');
        
        // Tomar 3 pr√°cticas aleatorias para probar
        const practicasPrueba = await prisma.practica.findMany({
            take: 3,
            include: {
                grupos: {
                    include: {
                        grupo: {
                            include: {
                                indicaciones: {
                                    include: {
                                        indicacion: true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
        
        if (practicasPrueba.length > 0) {
            console.log('üìã Simulando generaci√≥n de indicaciones para:');
            
            practicasPrueba.forEach(practica => {
                console.log(`   ‚Ä¢ ${practica.nombre.substring(0, 50)}...`);
                
                if (practica.grupos.length > 0) {
                    const grupo = practica.grupos[0].grupo;
                    console.log(`     - Grupo: ${grupo.nombre}`);
                    console.log(`     - Ayuno: ${grupo.ayuno_horas ? grupo.ayuno_horas + 'h' : 'No requerido'}`);
                    console.log(`     - Orina: ${grupo.orina_tipo ? grupo.orina_tipo.replace('_', ' ') : 'No requerida'}`);
                    console.log(`     - Indicaciones: ${grupo.indicaciones.length} asociadas`);
                } else {
                    console.log('     ‚ö†Ô∏è  Sin grupos asociados');
                }
            });
        }
        
        // Verificar ejemplos de indicaciones completas
        console.log('\nüìù EJEMPLOS DE INDICACIONES COMPLETAS:');
        console.log('======================================');
        
        const indicacionesEjemplo = await prisma.indicacion.findMany({
            take: 3,
            where: {
                texto_instruccion: {
                    not: null
                }
            },
            orderBy: {
                id_indicacion: 'asc'
            }
        });
        
        indicacionesEjemplo.forEach((indicacion, index) => {
            console.log(`${index + 1}. ${indicacion.descripcion}`);
            console.log(`   √Årea: ${indicacion.area}`);
            console.log(`   Tipo: ${indicacion.tipo_indicacion}`);
            console.log(`   Instrucci√≥n: ${indicacion.texto_instruccion.substring(0, 100)}...`);
            console.log('');
        });
        
        // Realizar prueba funcional del endpoint principal
        console.log('üöÄ PRUEBA FUNCIONAL DEL SISTEMA:');
        console.log('=================================');
        
        try {
            // Simular una llamada al algoritmo de generaci√≥n
            const practicasParaPrueba = await prisma.practica.findMany({
                take: 2,
                include: {
                    grupos: {
                        include: {
                            grupo: {
                                include: {
                                    indicaciones: {
                                        include: {
                                            indicacion: true
                                        },
                                        orderBy: {
                                            orden: 'asc'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });
            
            if (practicasParaPrueba.length >= 2) {
                console.log('‚úÖ Simulaci√≥n exitosa:');
                console.log(`   ‚Ä¢ Se pueden procesar ${practicasParaPrueba.length} pr√°cticas simult√°neamente`);
                
                // Calcular ayuno m√°ximo
                let ayunoMaximo = 0;
                const tiposOrina = new Set();
                let totalIndicaciones = 0;
                
                practicasParaPrueba.forEach(practica => {
                    practica.grupos.forEach(pg => {
                        if (pg.grupo.ayuno_horas && pg.grupo.ayuno_horas > ayunoMaximo) {
                            ayunoMaximo = pg.grupo.ayuno_horas;
                        }
                        if (pg.grupo.orina_tipo) {
                            tiposOrina.add(pg.grupo.orina_tipo);
                        }
                        totalIndicaciones += pg.grupo.indicaciones.length;
                    });
                });
                
                console.log(`   ‚Ä¢ Ayuno m√°ximo requerido: ${ayunoMaximo > 0 ? ayunoMaximo + 'h' : 'No requerido'}`);
                console.log(`   ‚Ä¢ Tipos de orina: ${Array.from(tiposOrina).join(', ') || 'No requerida'}`);
                console.log(`   ‚Ä¢ Total de indicaciones a consolidar: ${totalIndicaciones}`);
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è  Error en prueba funcional:', error.message);
        }
        
        // Verificar conectividad con el servidor
        console.log('\nüåê VERIFICACI√ìN DE CONECTIVIDAD:');
        console.log('================================');
        
        try {
            const fetch = require('node-fetch');
            const response = await fetch('http://localhost:3000/api/health', {
                timeout: 5000
            });
            
            if (response.ok) {
                const healthData = await response.json();
                console.log('‚úÖ Servidor respondiendo correctamente');
                console.log(`   ‚Ä¢ Estado: ${healthData.status}`);
                console.log(`   ‚Ä¢ Tiempo de respuesta: ${healthData.timestamp}`);
            } else {
                console.log('‚ö†Ô∏è  Servidor responde pero con errores');
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è  Servidor no est√° ejecut√°ndose (esto es normal)');
            console.log('   Para iniciarlo: npm run dev');
        }
        
        // Recomendaciones finales
        console.log('\nüéØ RECOMENDACIONES:');
        console.log('===================');
        
        if (stats.practicas === 0) {
            console.log('‚ùå No se importaron pr√°cticas. Verificar el archivo Excel.');
        } else if (stats.practicas < 50) {
            console.log('‚ö†Ô∏è  Pocas pr√°cticas importadas. Considerar aumentar MAX_PRACTICAS en el script.');
        } else {
            console.log('‚úÖ Cantidad apropiada de pr√°cticas importadas.');
        }
        
        if (stats.grupos === 0) {
            console.log('‚ùå No se crearon grupos. Revisar l√≥gica de agrupaci√≥n.');
        } else {
            console.log('‚úÖ Grupos creados correctamente.');
        }
        
        if (stats.indicaciones === 0) {
            console.log('‚ùå No se importaron indicaciones. Revisar columna INDICACIONES del Excel.');
        } else {
            console.log('‚úÖ Indicaciones importadas correctamente.');
        }
        
        console.log('\nüöÄ SISTEMA LISTO PARA USO:');
        console.log('==========================');
        console.log('1. Ejecutar: npm run dev');
        console.log('2. Abrir: http://localhost:3000');
        console.log('3. Probar el simulador de indicaciones');
        console.log('4. Verificar que las indicaciones se generan correctamente');
        
        console.log('\n‚ú® ¬°Importaci√≥n verificada exitosamente!');
        
    } catch (error) {
        console.error('‚ùå Error durante la verificaci√≥n:', error);
        
        if (error.code === 'P2002') {
            console.error('   ‚Ä¢ Error de duplicados: revisar claves √∫nicas');
        } else if (error.code === 'P2025') {
            console.error('   ‚Ä¢ Error de relaci√≥n: verificar integridad referencial');
        } else {
            console.error('   ‚Ä¢ Error desconocido:', error.message);
        }
        
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

// Funci√≥n auxiliar para formatear n√∫meros
function formatearNumero(numero) {
    return numero.toLocaleString();
}

// Funci√≥n para mostrar progreso
function mostrarProgreso(actual, total, descripcion) {
    const porcentaje = Math.round((actual / total) * 100);
    const barra = '‚ñà'.repeat(Math.round(porcentaje / 5)) + '‚ñë'.repeat(20 - Math.round(porcentaje / 5));
    console.log(`${descripcion}: [${barra}] ${porcentaje}% (${actual}/${total})`);
}

// Ejecutar verificaci√≥n
verificarImportacion().catch(error => {
    console.error('Error fatal durante la verificaci√≥n:', error);
    process.exit(1);
});